window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":6.4031242374328485},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.196152422706632},"https://connorskees.github.io/blog/bf-compiler/":{"tf":6.244997998398398},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.47213595499958},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544}},"df":1,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"4":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"0":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{},"df":0,"8":{"docs":{},"df":0,"v":{"docs":{},"df":0,"2":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}},"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}}},"b":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":9.1104335791443},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.916079783099616},"https://connorskees.github.io/blog/bf-compiler/":{"tf":9.055385138137417},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":5.0990195135927845},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":8.12403840463596},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":7.483314773547883},"https://connorskees.github.io/extend-rule/":{"tf":3.3166247903554},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":10,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,"7":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"5":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"/":{"docs":{},"df":0,"3":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,",":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"0":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"%":{"docs":{},"df":0,",":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"^":{"docs":{},"df":0,"{":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"{":{"docs":{},"df":0,"n":{"docs":{},"df":0,"}":{"docs":{},"df":0,"{":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.449489742783178}},"df":1}}}}}}}}}},"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"2":{"docs":{},"df":0,",":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"3":{"docs":{},"df":0,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":2,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"4":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"5":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"6":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"8":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3,"5":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,",":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"6":{"docs":{},"df":0,",":{"docs":{},"df":0,"2":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}},"8":{"docs":{},"df":0,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{},"df":0,"0":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"5":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},":":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2}}},"2":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":7.416198487095663},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.744562646538029},"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":9,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":2.23606797749979}},"df":2,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"7":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"8":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"9":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"8":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"9":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4,"4":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":2,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"5":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"0":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":1}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"7":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"(":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2},"m":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":4}},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.744562646538029},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.358898943540674},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":9,",":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":3,",":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}},"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3},"4":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":7.615773105863909},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":6.244997998398398},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.3166247903554},"https://connorskees.github.io/multiplication/":{"tf":2.6457513110645907}},"df":8,"*":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1}}}},",":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"6":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.123105625617661},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":7,".":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"1":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3,",":{"docs":{},"df":0,"2":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,",":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,",":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":3},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,",":{"docs":{},"df":0,"8":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":5,"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"2":{"docs":{},"df":0,"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"6":{"docs":{},"df":0,",":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,"9":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"8":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.0}},"df":4,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,",":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"3":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,",":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"5":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1},"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,",":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"5":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,",":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5,",":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"7":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":1},"8":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":1}}},"x":{"docs":{},"df":0,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}}}},"_":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0}},"df":1}}}},"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}}}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}},"7":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"*":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}},"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.4641016151377544}},"df":2}}}}}},"a":{"docs":{},"df":0,"#":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"'":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1},".":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1},"c":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.872983346207417}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1}}}},"=":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907}},"df":1},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}},"a":{"docs":{},"df":0,"a":{"docs":{},"df":0,"a":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"b":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1},"x":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"'":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}}}},"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0}},"df":1}}},"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}},"k":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":1,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}}}}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":8,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.744562646538029},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.5677643628300215},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":7}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":3,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907},"https://connorskees.github.io/multiplication/":{"tf":4.47213595499958},"https://connorskees.github.io/simd-crc32/":{"tf":1.7320508075688772}},"df":11,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,"'":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":7}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7}}}},"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":6.48074069840786},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}},"[":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"y":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":3}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":4}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":3}}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":4,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5}}}},"g":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}}}}},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":7}}}},"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.196152422706632}},"df":1,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"]":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}},"1":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1},"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.242640687119285}},"df":7}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.242640687119285}},"df":2},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":3}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178}},"df":2,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}},"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":6}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907}},"df":1,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":2},"y":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}},"x":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"x":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"b":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":7.615773105863909},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":7.615773105863909},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.69041575982343},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.0990195135927845},"https://connorskees.github.io/extend-rule/":{"tf":9.848857801796104},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":8,"\"":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"'":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2}}}},")":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"+":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}}}},".":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1},"c":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"=":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":1},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5},"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":3.3166247903554},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":9,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":5}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":1}},"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":8,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":8}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907}},"df":2}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":5}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.830951894845301},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178}},"df":2,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.242640687119285}},"df":2}}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":6}}}}}},"f":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907}},"df":3,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1},"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"0":{"docs":{},"df":0,"9":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"f":{"docs":{},"df":0,"1":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"9":{"docs":{},"df":0,"c":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{},"df":0,"9":{"docs":{},"df":0,"e":{"docs":{},"df":0,"3":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"6":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"5":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"#":{"docs":{},"df":0,"l":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{},"df":0,"0":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":7}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":3.0},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":11,")":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}}}}},"n":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979}},"df":1}}}}},"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":4.69041575982343}},"df":4},"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"p":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.358898943540674},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772}},"df":1}}},"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":3,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0}},"df":1}}}}}},"g":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3},"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1}}}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":7.211102550927978},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":7.681145747868608},"https://connorskees.github.io/blog/bf-compiler/":{"tf":6.928203230275509},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.0}},"df":5,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}},"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":8.306623862918075},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":7,"=":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795}},"df":3}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":4}}},"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}},"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2},"g":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907}},"df":4,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":4.47213595499958},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":4}}}}}},"f":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989}},"df":1}}}},"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"[":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":5.0990195135927845},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":4.0}},"df":4,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":7.416198487095663}},"df":1,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2},"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.47213595499958},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.58257569495584}},"df":4}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":10,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":4}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772}},"df":1}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0}},"df":1,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.872983346207417}},"df":3}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":4.358898943540674}},"df":2}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907},"https://connorskees.github.io/extend-rule/":{"tf":5.830951894845301}},"df":6,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":6},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":7,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":5,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907}},"df":3}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.69041575982343},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.69041575982343},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":5}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":4.47213595499958},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":9}},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":1},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.3166247903554}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.358898943540674},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":6,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":3}}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":4}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}},"n":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":4}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":5}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":6},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"*":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"@":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":2,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}},"b":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"–":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3,"=":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"c":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.7320508075688772}},"df":1,"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.3166247903554}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"u":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}}}}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.7320508075688772}},"df":1}}}}}},"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":4.242640687119285},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":5,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.477225575051661},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":7,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.872983346207417}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"[":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.7416573867739413}},"df":2,"]":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2}}}}}}},"b":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2},"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}},"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.0}},"df":1,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903}},"df":1}}}}}}},"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}},"f":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":2,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":2,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":3}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"[":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4},"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772}},"df":2}}}}}},"–":{"docs":{},"df":0,"k":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"–":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"–":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":4.0}},"df":1,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903}},"df":1,"(":{"docs":{},"df":0,"[":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"z":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"[":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.3166247903554}},"df":2}}}}}}}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":8,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}},"g":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.23606797749979}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":3}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":3}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2},"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7,"c":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":1}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":3}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":7}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.898979485566356}},"df":1}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.1622776601683795}},"df":4,".":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":5}}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544}},"df":2}},"b":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":4.123105625617661}},"df":1}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2},"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.477225575051661}},"df":1,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"[":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.0990195135927845},"https://connorskees.github.io/extend-rule/":{"tf":4.358898943540674}},"df":6}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3},"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.0}},"df":1}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979}},"df":1},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}}}}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":6}},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3},"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":2},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":5}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.872983346207417},"https://connorskees.github.io/extend-rule/":{"tf":4.58257569495584},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":10,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":6}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":5}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":6}},"n":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":7.14142842854285}},"df":2,"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.4641016151377544}},"df":1}},"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.4641016151377544}},"df":1}},"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":2,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}}},"f":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2,"(":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0}},"df":1}},"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":2}},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":2}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":5},"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":6.928203230275509},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":3,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.0}},"df":4}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":7},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907},"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":10,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":1}}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":1}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}},"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":5}}}},"o":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.605551275463989}},"df":2,"$":{"docs":{},"df":0,"=":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}},"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.3166247903554},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772}},"df":1}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":8}},"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":5,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.196152422706632},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":8}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}},"ü":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"_":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772}},"df":1},"{":{"docs":{},"df":0,"i":{"docs":{},"df":0,"+":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.872983346207417},"https://connorskees.github.io/extend-rule/":{"tf":3.4641016151377544},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":11}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":9,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}},"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5},"n":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":5}},"t":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}}}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":3}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":10.14889156509222},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":9.746794344808963},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.3166247903554},"https://connorskees.github.io/extend-rule/":{"tf":5.291502622129181},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":10,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.605551275463989}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}},"+":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}}}},"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"]":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}}}}}}}}}},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}},"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}}}}}}}},"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"1":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":6},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}}}}},"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"–":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":5,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.7416573867739413}},"df":2,"q":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":3}},"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.872983346207417}},"df":8,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":6}}}},"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"–":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"/":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"/":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}},"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"/":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"?":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"7":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"=":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"v":{"docs":{},"df":0,"5":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6}},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5},"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}},".":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4},"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"*":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"x":{"docs":{},"df":0,"8":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}},"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":2,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":4}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.898979485566356},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772},"https://connorskees.github.io/simd-crc32/":{"tf":2.0}},"df":10}}}}},"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":5}}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":2,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903}},"df":3}},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":2},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":7.483314773547883},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":7.3484692283495345},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"j":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"j":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}},"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}}}},"[":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.795831523312719}},"df":2}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"(":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":2,"e":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":8,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}},"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.605551275463989}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}},"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.3166247903554}},"df":1}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":5}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3},"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}}}},"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,":":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,":":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":5}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.4641016151377544}},"df":7,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}}}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.242640687119285}},"df":2},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":3},"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":3}},"n":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":4}},"o":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":3}}}},"k":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.449489742783178}},"df":1,"'":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":6}},"y":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.47213595499958}},"df":2,"=":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":6,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}},"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907}},"df":2,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2}}}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":3}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":7,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}},"y":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"z":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}},"2":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1},"9":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2},"e":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.7416573867739413}},"df":2,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"f":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":2},"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"v":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":1,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903}},"df":1}}}},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"_":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":5.385164807134504},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":4,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.358898943540674},"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":8}}}},"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}},"b":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"'":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}}}}},"f":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":5,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":4}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.656854249492381},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":4,"[":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"]":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"[":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979}},"df":1}}},"l":{"docs":{},"df":0,"v":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":5,"4":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":1}}}}}},"g":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":6}},"o":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.0990195135927845},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":3.7416573867739413},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":9,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":7,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}}},"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}},"2":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}},"{":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{},"df":0,"}":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,":":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":7},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.242640687119285},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":4,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"=":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":1}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907},"https://connorskees.github.io/extend-rule/":{"tf":3.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":9}},"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795}},"df":1,"(":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":1},"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.916079783099616},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.830951894845301},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":4.0}},"df":4,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}},"h":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}}},"x":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903}},"df":2,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"b":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"d":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2},"y":{"docs":{},"df":0,"@":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":6}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"[":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":7.937253933193772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}},"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178}},"df":3,"(":{"docs":{},"df":0,"*":{"docs":{},"df":0,"[":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"[":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}},"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":2,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}},"z":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":1,"e":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.7416573867739413}},"df":1}}},"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"x":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":2},"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772},"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":6}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.449489742783178}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772}},"df":1}}},"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.47213595499958},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.4641016151377544},"https://connorskees.github.io/extend-rule/":{"tf":3.605551275463989},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":10},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":6.324555320336759},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.477225575051661},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.795831523312719},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7},"z":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554}},"df":2}}}},"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.477225575051661}},"df":1},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":8}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"7":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":4.58257569495584}},"df":7,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":3.7416573867739413}},"df":2,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1}}}}},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.196152422706632},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.898979485566356},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.47213595499958},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":5,"+":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":7,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979}},"df":2}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.242640687119285},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.242640687119285},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":8}},"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178}},"df":4,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":5}}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":8,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":8}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}},"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":5.916079783099616},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":2}},"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5},"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}},"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.196152422706632},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178}},"df":2}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1}},"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"/":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2}}}}}}}}}}}}},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/merge-tree/":{"tf":7.416198487095663},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":3.1622776601683795},"https://connorskees.github.io/multiplication/":{"tf":4.123105625617661},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":10}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"}":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}},"o":{"docs":{},"df":0,"(":{"docs":{},"df":0,"$":{"docs":{},"df":0,"$":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1,"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"1":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1},"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1,"2":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1}}},"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":2}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":1}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":4}}}}},"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"+":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}}},"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":10,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":7.745966692414834}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":5.656854249492381},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":9}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":9},"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"[":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":4.69041575982343},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":8}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":4}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":7.483314773547883}},"df":1}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.744562646538029}},"df":1}},"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.0}},"df":1,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}},"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.0}},"df":1}}}}}}}}}},"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":6.164414002968976}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"]":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"[":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.872983346207417}},"df":1}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"9":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"q":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":4}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":5.385164807134504}},"df":2,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"\"":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"[":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"+":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}}}}}}}}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":6,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0}},"df":1}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5},"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":3}}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"q":{"docs":{},"df":0,"d":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":3,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}}},"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903}},"df":1,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":6}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":4.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":2}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":1}}}}}}},"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}},"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.47213595499958}},"df":1,"'":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"y":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}},"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.358898943540674},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":5.477225575051661},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.477225575051661},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}},"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":5.196152422706632},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3}}}}}},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907}},"df":7,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":6.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":8}}}},"t":{"docs":{"https://connorskees.github.io/blog/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":8}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}}},"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}}}},"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":3,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.242640687119285},"https://connorskees.github.io/extend-rule/":{"tf":3.3166247903554},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":8}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2},"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903}},"df":2}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":3,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"{":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}},"o":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":10}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":3}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"m":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":4}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907}},"df":1}}}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":6.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":6.244997998398398},"https://connorskees.github.io/blog/bf-compiler/":{"tf":5.656854249492381},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.898979485566356}},"df":4}},"u":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":4}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.196152422706632}},"df":3,"'":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}}}}}}},"q":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951}},"df":3,"(":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":3}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":3}}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6}},"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}}}}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":3,"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.242640687119285},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.605551275463989}},"df":2,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2},"4":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":4,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}},"9":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544}},"df":4,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}}}}},"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}},"[":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"]":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.358898943540674},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":7.14142842854285},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":5}},"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":7.3484692283495345},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/bf-compiler/":{"tf":6.855654600401044},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":4,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951}},"df":1}}}},"c":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.69041575982343}},"df":4}},"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.358898943540674},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.58257569495584}},"df":4,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.69041575982343}},"df":4}},"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903}},"df":3}},"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4,"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.6457513110645907},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":7}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.4641016151377544}},"df":3,"u":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":4}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.898979485566356},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":4.47213595499958}},"df":1}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}}}}},"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":4,"=":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":4}},"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}},"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1},"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}},"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}}},"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":5}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":6,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":4.58257569495584},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}}}},"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.123105625617661},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":4}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":5}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903}},"df":3,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}}}}},"g":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}},"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178}},"df":4,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3},"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":5}}}}},"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1}}}},"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.358898943540674},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.916079783099616},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.47213595499958}},"df":4}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.6457513110645907}},"df":1}},"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979}},"df":5,"'":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2},"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.7416573867739413}},"df":1,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}},"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},":":{"docs":{},"df":0,"3":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},":":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}},"k":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":3.1622776601683795},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":9},"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":5.291502622129181}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}},"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3}},"e":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":2}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}},"ö":{"docs":{},"df":0,"n":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"–":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":3}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":8}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}}}},"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2},"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}},"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":10.392304845413264}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":12.727922061357855}},"df":1,"'":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}}},"f":{"docs":{},"df":0,".":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":4.58257569495584}},"df":3}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":1},"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":6},"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}}},"q":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":5.477225575051661}},"df":1,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":7.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3},"t":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":2}}},"v":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":4.898979485566356},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.242640687119285}},"df":7,"(":{"docs":{},"df":0,"[":{"docs":{},"df":0,"1":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1},"2":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":2,"d":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}},"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3,"n":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}},"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":2}}}}}}}}}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":2}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":3.7416573867739413},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":6},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6}}},"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4},"f":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":7}}},"z":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}},"v":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":7},"i":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":3}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.47213595499958},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":6}},"r":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":5.744562646538029}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":2,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}},"f":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":5.5677643628300215}},"df":7,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1},"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.8284271247461903}},"df":4}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":4.123105625617661}},"df":3,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0}},"df":1}}}},"1":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1},"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.8284271247461903},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":3}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}}}},"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1},"1":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0}},"df":2}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907}},"df":1,"/":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":6}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":7,"4":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":4}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":5.477225575051661},"https://connorskees.github.io/blog/python-leetcode/":{"tf":4.242640687119285}},"df":4,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.242640687119285},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":3}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":2,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":3,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"x":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"2":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"*":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":5}}}},"y":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903}},"df":1,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":3}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.872983346207417}},"df":1,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903}},"df":1,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":5}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}},"x":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.795831523312719},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.795831523312719}},"df":2,"l":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}}}}},"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"k":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":3.1622776601683795},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":8,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":3.4641016151377544}},"df":3,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":4}},"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":6.082762530298219},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772}},"df":1}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0}},"df":1},"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.242640687119285}},"df":3,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":6}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":6},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"'":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":5}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":7},"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":8}},"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":9,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":2.8284271247461903},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":7}}},"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.123105625617661},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":4.123105625617661}},"df":9}},"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903}},"df":2}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":3}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.449489742783178}},"df":1}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2},"m":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1,"–":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":1}}}}}}},"p":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.4142135623730951}},"df":5}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.3166247903554}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":4.358898943540674},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.872983346207417},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/merge-tree/":{"tf":9.695359714832659},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":3,"'":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.6457513110645907}},"df":1}}}}},"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":6,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}},"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":1,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":3.1622776601683795}},"df":3},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.872983346207417},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.449489742783178},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.449489742783178},"https://connorskees.github.io/extend-rule/":{"tf":3.872983346207417},"https://connorskees.github.io/multiplication/":{"tf":2.6457513110645907}},"df":10}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.872983346207417},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":6,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"o":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":1}}}},"u":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}},"8":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.0}},"df":2},"d":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1},"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":2.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.4142135623730951}},"df":8}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"[":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":4.0}},"df":1,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.872983346207417}},"df":1},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"#":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}},".":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":3.605551275463989}},"df":1}},"a":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":5,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}},"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":3}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":2}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":5}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":9,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.58257569495584},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.605551275463989},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":4.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":4.898979485566356},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.47213595499958},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/python-leetcode/":{"tf":6.708203932499369},"https://connorskees.github.io/extend-rule/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":2.8284271247461903},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":11,"a":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3}},"i":{"docs":{},"df":0,"z":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":6.164414002968976}},"df":2,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772}},"df":2}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4,"1":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0}},"df":1},"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}},"u":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":3.7416573867739413},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":4.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":5.385164807134504},"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979},"https://connorskees.github.io/multiplication/":{"tf":1.7320508075688772}},"df":10,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}},"n":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1},"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"!":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2}}}}}},"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":2}}}}}}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.449489742783178}},"df":2}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":3}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6,"f":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":3}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.0}},"df":1}},"t":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":3.0}},"df":1}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.69041575982343}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.1622776601683795}},"df":1}}},"v":{"docs":{},"df":0,"g":{"docs":{},"df":0,"b":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178}},"df":3},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.3166247903554},"https://connorskees.github.io/extend-rule/":{"tf":2.0}},"df":8}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":3.1622776601683795},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.0}},"df":9}},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.4641016151377544},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":2.449489742783178},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":8}},"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":3.3166247903554},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":3.4641016151377544},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":7},"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}},"a":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":2.23606797749979}},"df":1}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":3}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.7320508075688772}},"df":1},"e":{"docs":{},"df":0,"v":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":4}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":5}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":5}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979}},"df":1,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.7320508075688772},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951}},"df":7}}}}}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3},"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":2.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.23606797749979},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":11,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.6457513110645907},"https://connorskees.github.io/blog/bf-compiler/":{"tf":2.6457513110645907}},"df":2,".":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.4142135623730951}},"df":2,"o":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":6}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.4142135623730951},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":4}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":4.47213595499958},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/bf-compiler/":{"tf":4.47213595499958},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.4142135623730951},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":2.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":7},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":5}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":2}}}}},"x":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.196152422706632},"https://connorskees.github.io/blog/merge-tree/":{"tf":3.1622776601683795},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":2.8284271247461903},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":3.7416573867739413}},"df":7,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}},"8":{"docs":{},"df":0,"6":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772}},"df":3,"_":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"^":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"3":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"4":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"5":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"6":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1},"7":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"0":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":5.656854249492381}},"df":1},"1":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":4.47213595499958}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":2.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":5}}},"y":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":2.6457513110645907}},"df":3,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":3},"l":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":2.23606797749979},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.7320508075688772},"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/extend-rule/":{"tf":1.7320508075688772}},"df":4}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"z":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":2.6457513110645907}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"p":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"title":{"root":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0},"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":2}}}}}}}}},"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/multiplication/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://connorskees.github.io/blog/miniz-optimization/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://connorskees.github.io/blog/permutation-polynomials/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://connorskees.github.io/blog/avx-png-filter/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/blog/iterative-tree-traversal/":{"tf":1.0},"https://connorskees.github.io/blog/merge-tree/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://connorskees.github.io/extend-rule/":{"tf":1.0},"https://connorskees.github.io/simd-crc32/":{"tf":1.0}},"df":2}}}}}}}}},"s":{"docs":{"https://connorskees.github.io/blog/python-leetcode/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}},"x":{"docs":{},"df":0,"8":{"docs":{},"df":0,"6":{"docs":{},"df":0,"_":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://connorskees.github.io/bf-compiler/":{"tf":1.0},"https://connorskees.github.io/blog/bf-compiler/":{"tf":1.0}},"df":2}}}}}}}}},"documentStore":{"save":true,"docs":{"https://connorskees.github.io/":{"body":"","id":"https://connorskees.github.io/","title":""},"https://connorskees.github.io/bf-compiler/":{"body":"Brainfuck is a programming language which, as the name might suggest, was designed to fuck with your brain. Brainfuck programs consist of only 8 characters: +-&gt;&lt;[],.. All other characters in a .bf file are ignored by the language. Here's what a simple \"hello, world\" program looks like in BF:\n++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\n\nBF has two pointers, one for instructions and one for data. The data pointer points somewhere inside a contiguous block of memory, and the instruction pointer points to the instruction currently being executed.\nThe BF operators have these semantics:\n\n&gt;: increment the data pointer by 1\n&lt;: decrement the data pointer by 1\n+: increment the value pointed to by the data pointer by 1\n-: decrement the value pointed to by the data pointer by 1\n.: print the value pointed to by the data pointer\n,: read a single byte from stdin and store it at the position pointed to by the data pointer\n[: if the value pointed to by the data pointer is 0, then jump to the instruction after a matching ]. otherwise continue\n]: if the value pointed to by the data pointer is not 0, then jump to the instruction after a matching [. otherwise continue\n\nThese 8 operators are technically enough to make BF turing complete, though doing even simple tasks involves a massive number of characters and it quickly becomes hard to reason about programs.\nBF lacks types, variables, functions, and even idioms for doing things like multiplication, which makes it very hard to write. But conversely, this makes it very easy to write an implementation. We can skip things like parsing and typechecking, and just go straight to compilation. \nWriting a Brainfuck Interpreter\nInterpreters are generally easier to write than compilers. You don't need to know assembly or any complex compiler algorithms — you just need to know the semantics of your operation and you can implement it in whatever language you want. We'll start by writing a simple BF interpreter to get a sense of BF's semantics, and also so that we have something to compare our compiler to.\nThe first thing we need to do for our interpreter is initialize the data and the instruction buffers. This is actually not that dissimilar to how your operating system loads executable files. \nOur data buffer is just an array of 8-bit bytes called \"cells.\" In brainfuck we have to provide the language with at least 30,000 cells, though we could go much higher than that if we wanted to.\nlet mut data_buffer = vec![0_u8; 30_000];\n\nFor the instruction buffer, let's start with just hardcoding the instructions, and then later, if we want to, we can support things like reading from files.\n// hello, world\nlet instruction_buffer = b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\";\n\nWe also need to initialize our data and instruction pointers.\nlet mut data_ptr = 0_usize;\nlet mut instruction_ptr = 0_usize;\n\nThe concept of an instruction pointer might sound similar if you already know a bit of assembly. In x86 this is the rip/eip/ip register.\nNow that we have our buffers and pointers initialized, we can start writing our interpreter loop. Our program executes until the instruction pointer reaches the end of our instructions.\nwhile instruction_ptr &lt; instruction_buffer.len() {\n    // ...\n}\n\nThen we can start implementing the functionality inside our loop,\nmatch instruction_buffer[instruction_ptr] {\n    b'&gt;' =&gt; todo!(),\n    b'&lt;' =&gt; todo!(),\n    b'+' =&gt; todo!(),\n    b'-' =&gt; todo!(),\n    b'.' =&gt; todo!(),\n    b',' =&gt; todo!(),\n    b'[' =&gt; todo!(),\n    b']' =&gt; todo!(),\n    _ =&gt; {},\n}\n\n// after executing each instruction, increment the instruction pointer to the next instruction\ninstruction_ptr += 1;\n\nThe first 4 operators are pretty simple.\nb'&gt;' =&gt; data_ptr += 1,\nb'&lt;' =&gt; data_ptr -= 1,\nb'+' =&gt; data_buffer[data_ptr] += 1,\nb'-' =&gt; data_buffer[data_ptr] -= 1,\n\nIn the case of + and -, we actually have a small issue. In rust, integer overflow is defined to panic in debug builds. Brainfuck is fine with overflow, and even expects it. To avoid crashes in debug mode, we need our addition and subtraction to be explicitly wrapping.\nb'+' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_add(1),\nb'-' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_sub(1),\n\nGreat. Now we can implement . and ,.\nb'.' =&gt; print!(\"{}\", char::from(data_buffer[data_ptr])),\nb',' =&gt; {\n    use std::io::Read;\n    let mut byte = [0];\n    let mut stdin = std::io::stdin();\n    // read single byte\n    stdin.read_exact(&amp;mut byte).unwrap();\n    // drop rest of line\n    stdin.read_line(&amp;mut String::new()).unwrap();\n    // store in memory\n    data_buffer[data_ptr] = byte[0];\n}\n\n. just prints a single character to stdout based on the value pointed to by the data ptr. , looks a lot more complicated, but it's basically just doing the same thing in reverse. It reads a single byte from stdin and stores it in memory. The API for doing this in rust is a bit more complicated, because it's not nearly as common as printing.\nThe last two operators are [ and ], which are used to implement a form of goto. These instructions allow you to jump to the matching instruction, which is actually very similar to how control flow works in WebAssembly. There's lot of ways you can implement this, but we'll start with the simplest: loop over the instructions until we find a match.\nb'[' =&gt; {\n    // point to next instruction\n    instruction_ptr += 1;\n\n    // if the data isn't 0, execute the next instruction. otherwise we need to jump\n    // to the matching `]` instruction\n    if data_buffer[data_ptr] != 0 {\n        continue;\n    }\n\n    // we need to find the closing brace matching this one, not just the first\n    // closing brace we see\n    let mut num_open_brackets = 0;\n\n    while instruction_ptr &lt; instruction_buffer.len() {\n        match instruction_buffer[instruction_ptr] {\n            b'[' =&gt; num_open_brackets += 1,\n            b']' =&gt; {\n                // if no open brackets, then we found our match\n                if num_open_brackets == 0 {\n                    instruction_ptr += 1;\n                    break;\n                // otherwise, \"close\" a bracket\n                } else {\n                    num_open_brackets -= 1;\n                }\n            }\n            _ =&gt; {}\n        }\n\n        instruction_ptr += 1;\n    }\n\n    continue;\n}\n\nHere, we either execute the following instruction if data_buffer[data_ptr] is 0, otherwise we jump to the instruction after the matching ]. The code for implementing ] looks very similar, but we iterate in reverse.\nPutting everything together:\nfn main() {\n    let mut data_buffer = vec![0_u8; 30_000];\n    let instruction_buffer = b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\";\n\n    let mut data_ptr = 0_usize;\n    let mut instruction_ptr = 0_usize;\n\n    while instruction_ptr &lt; instruction_buffer.len() {\n        match instruction_buffer[instruction_ptr] {\n            b'&gt;' =&gt; data_ptr += 1,\n            b'&lt;' =&gt; data_ptr -= 1,\n            b'+' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_add(1),\n            b'-' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_sub(1),\n            b'.' =&gt; print!(\"{}\", char::from(data_buffer[data_ptr])),\n            b',' =&gt; {\n                use std::io::Read;\n                let mut byte = [0];\n                let mut stdin = std::io::stdin();\n                // read single byte\n                stdin.read_exact(&amp;mut byte).unwrap();\n                // drop rest of line\n                stdin.read_line(&amp;mut String::new()).unwrap();\n                // store in memory\n                data_buffer[data_ptr] = byte[0];\n            }\n            b'[' =&gt; {\n                // point to next instruction\n                instruction_ptr += 1;\n\n                // if the data is 0, execute the next instruction. otherwise we need to jump\n                // to the matching `]` instruction\n                if data_buffer[data_ptr] != 0 {\n                    continue;\n                }\n\n                // we need to find the closing brace matching this one, not just the first\n                // closing brace we see\n                let mut num_open_brackets = 0;\n\n                while instruction_ptr &lt; instruction_buffer.len() {\n                    match instruction_buffer[instruction_ptr] {\n                        b'[' =&gt; num_open_brackets += 1,\n                        b']' =&gt; {\n                            // if no open brackets, then we found our match\n                            if num_open_brackets == 0 {\n                                instruction_ptr += 1;\n                                break;\n                            // otherwise, \"close\" a bracket\n                            } else {\n                                num_open_brackets -= 1;\n                            }\n                        }\n                        _ =&gt; {}\n                    }\n\n                    instruction_ptr += 1;\n                }\n\n                continue;\n            }\n            b']' =&gt; {\n                if data_buffer[data_ptr] == 0 {\n                    instruction_ptr += 1;\n                    continue;\n                }\n\n                let mut num_close_brackets = 0;\n\n                instruction_ptr -= 1;\n\n                while instruction_ptr &lt; instruction_buffer.len() {\n                    match instruction_buffer[instruction_ptr] {\n                        b'[' =&gt; {\n                            // if no close brackets, then we found our match\n                            if num_close_brackets == 0 {\n                                instruction_ptr += 1;\n                                break;\n                            // otherwise, \"close\" a bracket\n                            } else {\n                                num_close_brackets -= 1;\n                            }\n                        }\n                        b']' =&gt; num_close_brackets += 1,\n                        _ =&gt; {}\n                    }\n\n                    instruction_ptr -= 1;\n                }\n\n                continue;\n            }\n\n            _ =&gt; {}\n        }\n\n        instruction_ptr += 1;\n    }\n}\n\n$ cargo r -q\nHello World!\n\nIt works! We successfully implemented a brainfuck interpreter.\nBut we have a problem. Our interpreter is super slow. If we try running this program to find all the primes under a given number, it takes way too long.\n$ cargo b --release\n$ ./target/release/bf\n9\n9\n\n\nPrimes up to: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n\nOn my machine it takes around 400ms to execute this program if I hard code the input. That's pretty bad!\nOptimizing [ and ]\nBefore doing anything more drastic, we can make our implementation of control flow a bit nicer by introducing an intermediate representation.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt;\n    AngleGt,\n    /// &lt;\n    AngleLt,\n    /// +\n    Plus,\n    /// -\n    Minus,\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen(usize),\n    /// ]\n    BracketClose(usize),\n}\n\nThen we can write a simple parser to convert the input to this representation.\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    let mut open_idxs = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' =&gt; instructions.push(Instruction::AngleGt),\n            b'&lt;' =&gt; instructions.push(Instruction::AngleLt),\n            b'+' =&gt; instructions.push(Instruction::Plus),\n            b'-' =&gt; instructions.push(Instruction::Minus),\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; {\n                let idx = instructions.len();\n                open_idxs.push(idx);\n                // placeholder value to be filled in when we find the matching `]`\n                instructions.push(Instruction::BracketOpen(0));\n            },\n            b']' =&gt; {\n                let idx = instructions.len();\n                let matching_brace = open_idxs.pop().unwrap();\n                instructions.push(Instruction::BracketClose(matching_brace));\n                instructions[matching_brace] = Instruction::BracketOpen(idx);\n            },\n            _ =&gt; {},\n        }\n    }\n\n    instructions\n}\n\nOur match statement looks roughly the same, but the implementation of [ and ] can become a lot simpler.\nlet instruction_buffer = parse_instructions(b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\");\n\n// ...\n\nmatch instruction_buffer[instruction_ptr] {\n    // ...\n    Instruction::BracketOpen(jmp) =&gt; {\n        if data_buffer[data_ptr] != 0 {\n            instruction_ptr += 1;\n        } else {\n            instruction_ptr = jmp + 1;\n        }\n\n        continue;\n    }\n    Instruction::BracketClose(jmp) =&gt; {\n        if data_buffer[data_ptr] == 0 {\n            instruction_ptr += 1;\n        } else {\n            instruction_ptr = jmp + 1;\n        }\n\n        continue;\n    }\n}\n\nThis is way simpler than traversing all the instructions to find the matching instruction each time. After making this change, our program to find all the primes under 99 takes about 200ms on my machine. 2x faster, but still not enough! We can do better.\nWriting a Compiler\nA compiler is a program that takes a programming language and compiles it to some sort of lower level language. Compilers for modern programming languages are huge and involve insane optimizations and complex type systems. We won't be worrying about any of that. Our first compiler is going to be as simple as possible.\nWhat exactly are we compiling our program to?\nYour CPU doesn't understand assembly. It understands machine code. Assembly is roughly the textual representation of machine code, but there are usually a few differences.\nTo convert assembly into machine code your CPU can understand, we need to use an assembler. Then, to create an executable your operating system can run, we need to use a linker.\nWriting Assembly\nWe're going to do something a bit hacky. There aren't any good libraries for going from assembly to executable in rust, so we're going to do string concatenation and then run nasm on the result. iced_x86 is a great library for assembling and disassembling x86, but has some issues with generating full binaries that make it unsuitable for our purposes here. iced_x86 would be a great choice for a JIT compiler.\nWe'll initialize our assembly string like so,\nlet mut asm = String::new();\n\nWe need to start by setting some nasm boilerplate and creating our entrypoint. By convention the entrypoint to our program is named _start on Linux and start on Mac. I'm compiling this on Linux, so all the code examples below will use the Linux conventions, but I'll mention when there are differences for Mac.\n%use masm\n\nBITS 64\n\nsection .text\n\nglobal _start\n\n_start:\n\nWith that out of the way, how do we translate our interpreter to a compiler?\nThe first thing we want to think about is where to store the data pointer and the instruction pointer.\nThe instruction pointer is pretty easy — x86 already provides us a register called rip which is exactly that. Plus, reusing the rip for moving between instructions lets us reuse jmp instructions and labels to do our control flow with [ and ].\nFor the data pointer, we can store its value pretty much anywhere. Let's choose rbx since it's not really used by other constructs, like calling functions or syscalls.\nThe next question is, where do we store our data? In our interpreter, we allocate a block of 30,000 bytes in memory and initialize it all to 0. That memory never grows during our program so we'd actually be fine storing it in the data section of our binary. We can initialize that memory in our assembly like this:\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nThis declares a data section, and then initializes a buffer of 30,000 bytes to 0. We can reference data_buffer just like a label or a variable. The value of data_buffer is just a pointer to our initialized buffer of memory. For simplicity we'll declare this section in our boilerplate at the start, but it could also go anywhere in our program.\nTo start our program, we need to store the pointer to data_buffer in rbx. That's pretty simple: mov rbx, data_buffer.\nSo our actual prelude is:\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\n    mov rbx, data_buffer\n\n; the rest of our compiled code\n\nNow we've translated our pointers and memory. It's time to start working on the instructions.\nLike before, we loop through all our instructions.\nfn main() {\n    let instructions = parse_instructions(b\"...\");\n\n    let mut asm = String::new();\n\n    // ...\n\n    for inst in instructions {\n        match inst {\n            // ...\n        }\n    }\n}\n\nAnd just like our interpreter, we can start filling out our match statement.\nInstruction::AngleGt =&gt; asm += \"add rbx, 1\\n\",\nInstruction::AngleLt =&gt; asm += \"sub rbx, 1\\n\",\n\n&gt; and &lt; increment and decrement the data pointer respectively. Here, rbx holds our data pointer so we modify its value directly.\nInstruction::Plus =&gt; asm += \"add BYTE PTR [rbx], 1\\n\",\nInstruction::Minus =&gt; asm += \"sub BYTE PTR [rbx], 1\\n\",\n\n+ and - increment and decrement the value pointed to by rbx respectively. The [rbx] in this syntax is a pointer dereference, so we're not modifying rbx directly, but rather the byte it's pointing to.\n, and . are bit more complicated. They read from stdin and write to stdout respectively. To do that, we need to make syscalls. Syscalls are functions provided to us by the operating system. \nSyscalls, just like regular function calls in assembly, have specific calling conventions. We store the arguments in registers and execute the syscall instruction. To tell the operating system which syscall we want to make, we set the value in rax to a predefined number. For the write syscall, this number is 1 on Linux and 0x02000004 on Mac. \nThe write syscall takes 3 arguments: the file handle, a pointer to the message to be written, and the number of bytes to write of that message. The Linux and Mac syscall ABI follows the \"diane's silk dress costs $89\" mnemonic, meaning we pass in arguments in the order rdi, rsi, rdx, rcx, r8, and r9. Here we only have 3 arguments, so we just need to use the first 3 registers.\n; select the write syscall on Linux\nmov rax, 1\n; file handle (1 for stdout)\nmov rdi, 1\n; pointer to message, which is our data buffer\nmov rsi, rbx\n; number of bytes to write, which is 1\nmov edx, 1\nsyscall\n\nThis is our implementation of ., which prints to stdout. Next we have to do a read.\nThe API for read is pretty similar. It takes a file descriptor (0 for stdin), a pointer to somewhere in memory to write, and the number of bytes to read from stdin.\n; select the read syscall on Linux\nmov rax, 0\n; file handle (0 for stdin)\nmov rdi, 0\n; pointer to message, which is our data buffer\nmov rsi, rbx\n; number of bytes to read, which is 1\nmov edx, 1\nsyscall\n\nFinally we have to compile our control flow instructions, [ and ].\nWe're going to compile our loops to look something like this:\nloop_start:\n; condition\njmp loop_end\n; loop code\njmp loop_start\nloop_end:\n; other instructions\n\nWe have to give each loop label a unique identifier, otherwise their labels would conflict with each other. We can do this pretty simply by keeping a strictly increasing integer which we increment every time we encounter a [. To match our ] to [, we can keep a stack, similar to our optimization for matching braces in our interpreter.\nlet mut label_count = 0;\nlet mut labels = Vec::new();\n\nAnd then in our match statement:\nInstruction::BracketOpen(..) =&gt; {\n    let loop_idx = label_count;\n    label_count += 1;\n\n    asm += &amp;format!(\"\n        cmp BYTE PTR [rbx], 0\n        je loop{loop_idx}_close\n        loop{loop_idx}_open:\n    \");\n\n    labels.push(loop_idx);\n}\n\nIn our closing brace code we need to pop off the labels stack and jump to the start.\nInstruction::BracketClose(jmp) =&gt; {\n    let loop_idx = labels.pop().unwrap();\n\n    asm += &amp;format!(\"\n        cmp BYTE PTR [rbx], 0\n        jne loop{loop_idx}_open\n        loop{loop_idx}_close:\n    \");\n}\n\nAnd that's it! Now we just have to make our program exit gracefully. It can do that by calling the exit syscall with an error code of 0.\n; select the exit syscall on Linux\nmov rax, 60\n; set exit code in rdi to 0\nxor rdi, rdi\nsyscall\n\nThat's everything we need to write a compiler for brainfuck. Let's try printing out asm and seeing what the codegen looks like.\n$ cargo r\n\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\nmov rbx, data_buffer\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\ncmp BYTE PTR [rbx], 0\nje loop0_close\nloop0_open:\nadd rbx, 1\n\n; ... \n\nmov rax, 60\nxor rdi, rdi\nsyscall\n\nThat looks pretty good to me! We can pipe that to a file and try assembling it with nasm.\n$ cargo r &gt; hello-world.s\n$ nasm -felf64 hello-world.s\n$ ld hello-world.o \n$ ./a.out\nHello World!\n\nIt works!\nHere's the full code for this section:\nfn main() {\n    let instructions = parse_instructions(b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\");\n\n    let mut asm = String::new();\n\n    // nasm setup\n    asm += \"\\\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\nmov rbx, data_buffer\n\";\n\n    let mut label_count = 0;\n    let mut labels = Vec::new();\n\n    for inst in instructions {\n        match inst {\n            Instruction::AngleGt =&gt; asm += \"add rbx, 1\\n\",\n            Instruction::AngleLt =&gt; asm += \"sub rbx, 1\\n\",\n            Instruction::Plus =&gt; asm += \"add BYTE PTR [rbx], 1\\n\",\n            Instruction::Minus =&gt; asm += \"sub BYTE PTR [rbx], 1\\n\",\n            Instruction::Dot =&gt; {\n                asm += \"\\\n                    mov rax, 1\\n\\\n                    mov rdi, 1\\n\\\n                    mov rsi, rbx\\n\\\n                    mov edx, 1\\n\\\n                    syscall\\n\\\n                \";\n            }\n            Instruction::Comma =&gt; {\n                asm += \"\\\n                    mov rax, 0\\n\\\n                    mov rdi, 0\\n\\\n                    mov rsi, rbx\\n\\\n                    mov edx, 1\\n\\\n                    syscall\\n\\\n                \"\n            }\n            Instruction::BracketOpen(..) =&gt; {\n                let loop_idx = label_count;\n                label_count += 1;\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rbx], 0\\n\\\n                    je loop{loop_idx}_close\\n\\\n                    loop{loop_idx}_open:\\n\\\n                \"\n                );\n\n                labels.push(loop_idx);\n            }\n            Instruction::BracketClose(..) =&gt; {\n                let loop_idx = labels.pop().unwrap();\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rbx], 0\\n\\\n                    jne loop{loop_idx}_open\\n\\\n                    loop{loop_idx}_close:\\n\\\n                \"\n                );\n            }\n        }\n    }\n\n    // prologue\n    asm += \"\\\n        mov rax, 60\\n\\\n        xor rdi, rdi\\n\\\n        syscall\\n\\\n    \";\n\n    println!(\"{asm}\");\n}\n\nCompiler Optimizations\nThis is pretty good, but we can do better. For a simple hello world we generate over 200 instructions. \nOur assembly is pretty suboptimal, so we have plenty of room to improve. Take this sample from our assembly:\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\n\nWe have strings of +++++ all over our hello world code, to increment the memory to a given character value. These repeated additions by 1 could be simplified into a single addition by a larger number.\nTo start optimizing, we need to change our intermediate representation a bit. Instead of separating out &lt;/&gt; and +/-, we can combine them in our intermediate representation. &lt; and - are just adds by negative numbers.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt; and &lt;\n    PointerAdd(isize),\n    /// + and -\n    ValueAdd(isize),\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen,\n    /// ]\n    BracketClose,\n}\n\nIn addition to combining our addition operators, we've added support for arbitrary numbers to +, -, &gt;, and &lt;. This way we can represent ++ as Plus(2). We also removed the offset code from [ and ], since that's handled by our compiler now.\nWe can change our parser to support this new representation.\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' | b'&lt;' =&gt; {\n                let v = match b {\n                    b'&gt;' =&gt; 1,\n                    b'&lt;' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::PointerAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::PointerAdd(v))\n                }\n            }\n            b'+' | b'-' =&gt; {\n                let v = match b {\n                    b'+' =&gt; 1,\n                    b'-' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::ValueAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::ValueAdd(v))\n                }\n            }\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; instructions.push(Instruction::BracketOpen),\n            b']' =&gt; instructions.push(Instruction::BracketClose),\n            _ =&gt; {}\n        }\n    }\n\n    instructions\n}\n\nThis already makes our assembly a lot nicer. \n_start:\nmov rbx, data_buffer\nadd BYTE PTR [rbx], 8\ncmp BYTE PTR [rbx], 0\nje loop0_close\nloop0_open:\nadd rbx, 1\nadd BYTE PTR [rbx], 4\ncmp BYTE PTR [rbx], 0\nje loop1_close\nloop1_open:\nadd rbx, 1\nadd BYTE PTR [rbx], 2\nadd rbx, 1\nadd BYTE PTR [rbx], 3\n\nThere's a couple other low hanging fruit. In our syscalls to read and write, we always set edx to 1, so instead of doing that before each syscall, let's just do it once at the start of our program.\nsection .text\n\nglobal _start\n\n_start:\nmov rbx, data_buffer\nmov edx, 1\n\nThat shaves off about 10 instructions from our hello world program.\nWe can make a similar optimization after realizing that we always set rsi to the value of rbx before doing a syscall. Why don't we just use rsi instead of rbx everywhere, and then we can make instructions like mov rsi, rbx superfluous. This shaves off another 10 instructions.\nloop2_close:\nadd rsi, -1\nadd BYTE PTR [rsi], -1\ncmp BYTE PTR [rsi], 0\njne loop0_open\nloop0_close:\nadd rsi, 2\nmov rax, 1\nmov rdi, 1\nsyscall\nadd rsi, 1\nadd BYTE PTR [rsi], -3\nmov rax, 1\nmov rdi, 1\nsyscall\n\nThere's still plenty of optimization to be done — for example, removing the redundant mov rax, 1 and mov rdi, 1 between sequential write syscalls and trivial things like removing empty loops or additions by 0 — but I think what we have so far is sufficient to get the idea.\nIf we compare our first interpreter to our optimizing compiler on this program which finds all the primes under 2551, our compiled program prints all the primes in 13 seconds. The interpreter ran for several minutes without printing anything before I killed it.\nHere's our final code, if you'd like to modify it to generate ARM assembly or add more optimizations.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt; and &lt;\n    PointerAdd(isize),\n    /// + and -\n    ValueAdd(isize),\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen,\n    /// ]\n    BracketClose,\n}\n\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' | b'&lt;' =&gt; {\n                let v = match b {\n                    b'&gt;' =&gt; 1,\n                    b'&lt;' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::PointerAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::PointerAdd(v))\n                }\n            }\n            b'+' | b'-' =&gt; {\n                let v = match b {\n                    b'+' =&gt; 1,\n                    b'-' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::ValueAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::ValueAdd(v))\n                }\n            }\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; instructions.push(Instruction::BracketOpen),\n            b']' =&gt; instructions.push(Instruction::BracketClose),\n            _ =&gt; {}\n        }\n    }\n\n    instructions\n}\n\nfn main() {\n    let instructions = parse_instructions(b\"\n        ++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\n    \");\n\n    let mut asm = String::new();\n\n    // nasm setup\n    asm += \"\\\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\nmov rsi, data_buffer\nmov edx, 1\n\";\n\n    let mut label_count = 0;\n    let mut labels = Vec::new();\n\n    for inst in instructions {\n        match inst {\n            Instruction::PointerAdd(n) =&gt; asm += &amp;format!(\"add rsi, {n}\\n\"),\n            Instruction::ValueAdd(n) =&gt; asm += &amp;format!(\"add BYTE PTR [rsi], {n}\\n\"),\n            Instruction::Dot =&gt; {\n                asm += \"\\\n                    mov rax, 1\\n\\\n                    mov rdi, 1\\n\\\n                    syscall\\n\\\n                \";\n            }\n            Instruction::Comma =&gt; {\n                asm += \"\\\n                    mov rax, 0\\n\\\n                    mov rdi, 0\\n\\\n                    syscall\\n\\\n                \"\n            }\n            Instruction::BracketOpen =&gt; {\n                let loop_idx = label_count;\n                label_count += 1;\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rsi], 0\\n\\\n                    je loop{loop_idx}_close\\n\\\n                    loop{loop_idx}_open:\\n\\\n                \"\n                );\n\n                labels.push(loop_idx);\n            }\n            Instruction::BracketClose =&gt; {\n                let loop_idx = labels.pop().unwrap();\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rsi], 0\\n\\\n                    jne loop{loop_idx}_open\\n\\\n                    loop{loop_idx}_close:\\n\\\n                \"\n                );\n            }\n        }\n    }\n\n    // prologue\n    asm += \"\\\n        mov rax, 60\\n\\\n        xor rdi, rdi\\n\\\n        syscall\\n\\\n    \";\n\n    println!(\"{asm}\");\n}\n\n1\nthe code linked only finds the primes up to 30, but can be easily modified to find up to 255\n\n","id":"https://connorskees.github.io/bf-compiler/","title":"Writing an x86_64 Compiler for Brainfuck"},"https://connorskees.github.io/blog/":{"body":"","id":"https://connorskees.github.io/blog/","title":"Posts"},"https://connorskees.github.io/blog/avx-png-filter/":{"body":"PNG compression involves two schemes — filtering and DEFLATE.\nFiltering is a pre-processing step that operates row-by-row and is used to decrease entropy in the data. It works off the assumption that pixels and their neighbors are usually similar, but not necessarily the exact same. DEFLATE is a common lossless compression format combining LZ77 and Huffman coding.\nThe step that I'm interested in talking about right now is filtering. You can find a pretty good explanation of the algorithm in the PNG specification, but I'll walk through a quick summary of the parts that are relevant to this post.\nI'll start by introducing two primitives: the pixel, and \"bpp\" or bits per pixel. PNGs support a number of different color formats, and those formats affect how we encode and decode pixels. There are two properties we care about — color type and bit depth.\nColor type defines the channels or components that make up a pixel. For example, in the RGBA color type, pixels consist of 4 channels — red, green, blue, and alpha. PNGs support simple grayscale, grayscale with alpha, RGB, RGBA, and an \"indexed\" color type that lets you assign a single integer to each color.\nBit depth defines the number of bits per channel. Certain color types only permit certain bit depths. If you're curious, the list of permitted combinations can be found in the spec.\nBy combining the color type, which defines the number of channels, and the bit depth, which defines the number of bits per channel, we can find the number of bits per pixel. We refer to this value as \"bpp.\" Although bpp typically refers to bits per pixel, for the rest of this post, the \"b\" in \"bpp\" will refer to \"bytes.\"\nLet's look at a simple example:\nIf we have an RGB color type with a bit depth of 8, our bits per pixel is 3 * 8 or 24, and our bytes per pixel is (bits per pixel) / 8 = 3.\nWhen applying filters, the minimum bytes per pixel used is 1, even if the number of bits per pixel is less than a full byte.\nFilters are applied for every byte, regardless of bit depth. This means that if the number of bits per channel is greater than a full byte, we operate on the bytes of that channel separately.\nThe PNG Filters\nThere are 5 filters — none, up, sub, average, and paeth. Each filter applies a certain operation to a row of bytes. We'll walk through a simple explanation of the first 3, but we won't talk about the average or paeth filters. They're pretty interesting, but the rest of this post will focus on the sub filter, so we don't need to worry about understanding how they work.\nThe none filter, as the name suggests, does not alter the bytes and just copies them as-is.\nThe up filter takes the pixel at position n and subtracts it by the pixel at position n in the row above it. For example, if we have two rows that look like this:\n[1, 2, 3, 4, 5]\n[1, 2, 3, 4, 5]\n\nAfter applying the up filter, we get this compressed result:\n[1, 2, 3, 4, 5]\n[0, 0, 0, 0, 0]\n\nWe consider the row before the first row to contain only zeros, so the first row is unchanged.\nThe sub filter takes the pixel at position n and subtracts it by the pixel in the same row at position n - 1. For example, if we have a row that looks like this:\n[1, 2, 3, 4, 5]\n\nIf we apply the sub filter, we get this result:\n# [1 - 0, 2 - 1, 3 - 2, 4 - 3, 5 - 4]\n[1, 1, 1, 1, 1]\n\nThe sub filter operates on individual channels. That is, the red channel of pixel n is subtracted by the red channel of pixel n - 1, the blue channel is subtracted by the prior pixel's blue channel, and so on. The calculation for finding the corresponding channel involves the pixel's bpp.\nIf we look at the sub filter as operating on individual bytes, we say that the algorithm is filtered[n] = unfiltered[n] - unfiltered[n - bpp]. Where bpp is calculated based on the color type and bit depth.\nIf this sounds a bit confusing, it should make a lot more sense when we start looking at an implementation in code.\n\n\nTo decode any of these filters, you just have to add to the filtered value, rather than subtract from the raw value.\nImplementing the sub Filter\nThis is all just required background reading to understand what we're really interested in: optimizing the sub filter for 8-bit RGBA pixels. Although we introduced the filters by discussing how they're encoded, for the rest of this post we'll only be talking about how they're decoded.\nBefore moving on, however, I do want to note that the performance characteristics of filters inside the context of PNG decoders and PNG encoders are very different. This is because PNG decoders only have to apply a filter once per row, while a good encoder will likely try all filters for all rows. This can make PNG encoding somewhat slow, and also makes optimizations to individual filters more impactful. If we optimize a filter for PNG decoding, we only see wins for images that use that filter heavily. This may be an area I explore in the future, but for now my focus is primarily on decoding, as that's the operation most commonly performed on PNG files.\nAs promised, let's look at a simple code implementation of decoding the sub filter. All code examples going forward will be in rust.\npub fn sub(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    for i in 0..BYTES_PER_PIXEL {\n        decoded_row[i] = raw_row[i];\n    }\n\n    for i in BYTES_PER_PIXEL..decoded_row.len() {\n        let left = decoded_row[i - BYTES_PER_PIXEL];\n\n        decoded_row[i] = raw_row[i].wrapping_add(left)\n    }\n}\n\nBytes before the start of the row are 0, so we can just copy the first bpp bytes into the decoded row without doing any operations. For the next bytes, we add decoded_row[i - bpp] to the filtered byte.\nLet's look at how LLVM does with this:\nexample::sub:\n        push    rax\n        test    rsi, rsi\n        je      .LBB2_1\n        test    rcx, rcx\n        je      .LBB2_11\n        movzx   eax, byte ptr [rdi]\n        mov     byte ptr [rdx], al\n        cmp     rsi, 1\n        je      .LBB2_13\n        cmp     rcx, 1\n        je      .LBB2_15\n        movzx   eax, byte ptr [rdi + 1]\n        mov     byte ptr [rdx + 1], al\n        cmp     rsi, 2\n        je      .LBB2_17\n        cmp     rcx, 2\n        je      .LBB2_19\n        movzx   eax, byte ptr [rdi + 2]\n        mov     byte ptr [rdx + 2], al\n        cmp     rsi, 3\n        je      .LBB2_21\n        cmp     rcx, 3\n        je      .LBB2_23\n        movzx   eax, byte ptr [rdi + 3]\n        mov     byte ptr [rdx + 3], al\n        cmp     rcx, 4\n        jbe     .LBB2_27\n        lea     r8, [rsi - 4]\n        cmp     rcx, r8\n        cmovb   r8, rcx\n        lea     rax, [rcx - 5]\n        cmp     r8, rax\n        cmovae  r8, rax\n        inc     r8\n        mov     r10d, 4\n        cmp     r8, 4\n        jbe     .LBB2_4\n        mov     r9d, r8d\n        and     r9d, 3\n        mov     eax, 4\n        cmovne  rax, r9\n        mov     r9, r8\n        sub     r9, rax\n        neg     rax\n        lea     r10, [r8 + rax]\n        add     r10, 4\n        xor     r8d, r8d\n.LBB2_9:\n        vmovd   xmm0, dword ptr [rdi + r8 + 4]\n        vmovd   xmm1, dword ptr [rdx + r8]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + r8 + 4], xmm0\n        add     r8, 4\n        cmp     r9, r8\n        jne     .LBB2_9\n.LBB2_4:\n        mov     r8, rsi\n        neg     r8\n        add     r10, -4\n        mov     r9, rcx\n        neg     r9\n.LBB2_5:\n        cmp     rcx, r10\n        je      .LBB2_28\n        lea     rax, [r8 + r10]\n        cmp     rax, -4\n        je      .LBB2_7\n        movzx   eax, byte ptr [rdx + r10]\n        add     al, byte ptr [rdi + r10 + 4]\n        mov     byte ptr [rdx + r10 + 4], al\n        lea     rax, [r9 + r10]\n        inc     rax\n        inc     r10\n        cmp     rax, -4\n        jne     .LBB2_5\n.LBB2_27:\n        pop     rax\n        ret\n\n; ... panic handling code omitted\n\nIt does surprisingly well — though not perfect. It looks like our first loop is performed in serial and has bounds checks on every iteration. This is because we don't actually know that our input or output slice has at least BYTES_PER_PIXEL elements. If this were in the context of a real PNG decoder and this function got inlined, LLVM may be able to do a better job eliding bounds checks. In a real PNG decoder, a row length of 0 would imply the image data is empty and defiltering can be skipped altogether. The row length is guaranteed to be a multiple of BYTES_PER_PIXEL, and if it isn't, due to the image being malformed or truncated, we'd expect the PNG decoder to have errored out by this point. Going forward, our implementations of the sub filter will rely on these two assumptions.\nThe second loop is pretty interesting. It looks like LLVM is doing some magic to be able to vectorize it and perform the loads and additions BYTES_PER_PIXEL elements at a time. As we'll see later, this actually comes surprisingly close to our handwritten SIMD implementation.\nThough, it does look like there's still a lot of code dedicated to handling bounds checks. Let's see the impact of removing them. For simplicity, we'll drop into unsafe to remove them. This code is just for experimenting, so we won't include any debug assertions that you'd expect in proper code using unsafe in this way.\npub unsafe fn sub_no_bound_checks(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    for i in 0..BYTES_PER_PIXEL {\n        *decoded_row.get_unchecked_mut(i) = *raw_row.get_unchecked(i);\n    }\n\n    for i in BYTES_PER_PIXEL..decoded_row.len() {\n        let left = *decoded_row.get_unchecked(i - BYTES_PER_PIXEL);\n\n        *decoded_row.get_unchecked_mut(i) = raw_row.get_unchecked(i).wrapping_add(left)\n    }\n}\n\nexample::sub_no_bound_checks:\n        push    rbx\n        mov     eax, dword ptr [rdi]\n        mov     dword ptr [rdx], eax\n        cmp     rcx, 5\n        jb      .LBB2_12\n        lea     r8, [rcx - 4]\n        mov     ebx, 4\n        cmp     r8, 4\n        jb      .LBB2_11\n        mov     rbx, r8\n        vmovd   xmm0, dword ptr [rdx]\n        and     rbx, -4\n        lea     rsi, [rbx - 4]\n        mov     r10, rsi\n        shr     r10, 2\n        inc     r10\n        mov     r9d, r10d\n        and     r9d, 7\n        cmp     rsi, 28\n        jae     .LBB2_4\n        xor     esi, esi\n        jmp     .LBB2_6\n.LBB2_4:\n        and     r10, -8\n        xor     esi, esi\n.LBB2_5:\n        vmovd   xmm1, dword ptr [rdi + rsi + 4]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 4], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 8]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 8], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 12]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 12], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 16]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 16], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 20]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 20], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 24]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 24], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 28]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 28], xmm0\n        vmovd   xmm1, dword ptr [rdi + rsi + 32]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [rdx + rsi + 32], xmm0\n        add     rsi, 32\n        add     r10, -8\n        jne     .LBB2_5\n.LBB2_6:\n        test    r9, r9\n        je      .LBB2_9\n        lea     r10, [rdx + rsi]\n        add     r10, 4\n        lea     r11, [rdi + rsi]\n        add     r11, 4\n        shl     r9, 2\n        xor     esi, esi\n.LBB2_8:\n        vmovd   xmm1, dword ptr [r11 + rsi]\n        vpaddb  xmm0, xmm1, xmm0\n        vmovd   dword ptr [r10 + rsi], xmm0\n        add     rsi, 4\n        cmp     r9, rsi\n        jne     .LBB2_8\n.LBB2_9:\n        cmp     r8, rbx\n        je      .LBB2_12\n        add     rbx, 4\n.LBB2_11:\n        movzx   eax, byte ptr [rdi + rbx]\n        add     al, byte ptr [rdx + rbx - 4]\n        mov     byte ptr [rdx + rbx], al\n        lea     rax, [rbx + 1]\n        mov     rbx, rax\n        cmp     rcx, rax\n        jne     .LBB2_11\n.LBB2_12:\n        pop     rbx\n        ret\n\nThis does look a lot nicer. LLVM was able to autovectorize even more and it unrolled the second loop. Let's set up some benchmarks to see how big of an impact we had here. To benchmark, we'll use rust's stdlib benchmarking tools. We could use something like criterion, but that's not necessary for what we're doing here. We do want good and scientific benchmarks as we start to iterate and explore new algorithms, but the stdlib solution is sufficient for that.\n#![feature(test)]\n\n// ... our `sub` and `sub_no_bound_checks` implementations\n\n#[cfg(test)]\nmod bench {\n    use super::*;\n    use test::Bencher;\n\n    const BUFFER_SIZE: usize = 2_usize.pow(20);\n\n    #[bench]\n    fn bench_sub_naive_scalar(b: &amp;mut Bencher) {\n        let raw_row = std::hint::black_box([10; BUFFER_SIZE]);\n        let mut decoded_row = std::hint::black_box([0; BUFFER_SIZE]);\n\n        b.iter(|| sub(&amp;raw_row, &amp;mut decoded_row));\n\n        std::hint::black_box(decoded_row);\n    }\n\n    #[bench]\n    fn bench_sub_no_bound_checks(b: &amp;mut Bencher) {\n        let raw_row = std::hint::black_box([10; BUFFER_SIZE]);\n        let mut decoded_row = std::hint::black_box([0; BUFFER_SIZE]);\n\n        b.iter(|| unsafe { sub_no_bound_checks(&amp;raw_row, &amp;mut decoded_row) });\n\n        std::hint::black_box(decoded_row);\n    }\n}\n\nAnd now if we run our benchmarks using cargo bench, we get\nrunning 2 tests\ntest tests::bench_sub_naive_scalar    ... bench:      86,305 ns/iter (+/- 1,123)\ntest tests::bench_sub_no_bound_checks ... bench:      86,289 ns/iter (+/- 2,324)\n\nAlthough removing the bounds checks made our codegen look a lot nicer, it doesn't seem to actually improve our performance above noise. That's unfortunate. Let's see if we can do better.\nThe first goal is to try to get an idea of how close to the optimal solution we are. We can try comparing our filters to memcpy. We want to see how much overhead our subtraction is adding to the copying of bytes from raw_row to decoded_row.\nWe can add a benchmark that looks like this,\npub unsafe fn baseline_memcpy(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    decoded_row\n        .get_unchecked_mut(0..raw_row.len())\n        .copy_from_slice(&amp;*raw_row);\n}\n\nfn bench_baseline_memcpy(b: &amp;mut Bencher) {\n    let raw_row = std::hint::black_box([10; BUFFER_SIZE]);\n    let mut decoded_row = std::hint::black_box([0; BUFFER_SIZE]);\n\n    b.iter(|| unsafe { baseline_memcpy(&amp;raw_row, &amp;mut decoded_row) });\n\n    std::hint::black_box(decoded_row);\n}\n\nAnd to double check that baseline_memcpy gets optimized how we expect,\nexample::baseline_memcpy:\n        mov     rax, rdx\n        mov     rdx, rsi\n        mov     rsi, rdi\n        mov     rdi, rax\n        jmp     qword ptr [rip + memcpy@GOTPCREL]\n\nGreat. Now let's compare it to our sub implementations.\nrunning 3 tests\ntest tests::bench_baseline_memcpy     ... bench:      61,875 ns/iter (+/- 3,949)\ntest tests::bench_sub_naive_scalar    ... bench:      86,731 ns/iter (+/- 1,833)\ntest tests::bench_sub_no_bound_checks ... bench:      86,584 ns/iter (+/- 1,374)\n\nOur initial implementations don't actually seem to be that bad. But there's probably a lot of room for improvement here.\nCurrent State of the Art\nlibpng has had optimized filter implementations using explicit SIMD for close to a decade.\nThe optimization that they make is based around bpp.\nIt's difficult to decode the PNG filters in parallel. At first glance, it looks like there's a pretty strict data dependency on previous iterations. If we look at an example calculation, this becomes pretty clear. For simplicity in our example, we'll say bpp is 1. When we implement things in code, we'll usually default to a bpp of 4.\nWe'll start with the filtered array [1, 2, 3] and walk through defiltering it.\nfiltered = [1, 2, 3]\ndefiltered = [0, 0, 0]\n\n# defiltered = [1, 0, 0]\ndefiltered[0] = filtered[0]\n\n# defiltered = [1, 3, 0]\ndefiltered[1] = defiltered[0] + filtered[1]\n\n# defiltered = [1, 3, 6]\ndefiltered[2] = defiltered[1] + filtered[2]\n\nThe last calculation depends on the results of the second-to-last calculation. How can we work around this?\nlibpng's optimization doesn't really try to — it still does a lot of things in serial. But when the bpp is greater than 1, it can operate on bpp bytes per iteration rather than going byte-by-byte. This ends up being pretty fast — for a bpp of 4, you're operating on 4x the number of bytes.\nLet's look at how this implementation works in practice. We're going to port libpng's 4 bpp implementation to rust:\nunsafe fn load4(x: [u8; 4]) -&gt; __m128i {\n    let tmp = i32::from_le_bytes(*x);\n    _mm_cvtsi32_si128(tmp)\n}\n\nunsafe fn store4(x: &amp;mut [u8; 4], v: __m128i) {\n    let tmp = _mm_cvtsi128_si32(v);\n    x.get_unchecked_mut(..4).copy_from_slice(&amp;tmp.to_le_bytes());\n}\n\npub unsafe fn sub_sse2(raw: &amp;[u8], current: &amp;mut [u8]) {\n    let mut a: __m128i;\n    let mut d = _mm_setzero_si128();\n\n    let mut rb = raw_row.len() + 4;\n    let mut idx = 0;\n\n    while rb &gt; 4 {\n        a = d;\n        d = load4([\n            *raw_row.get_unchecked(idx),\n            *raw_row.get_unchecked(idx + 1),\n            *raw_row.get_unchecked(idx + 2),\n            *raw_row.get_unchecked(idx + 3),\n        ]);\n        d = _mm_add_epi8(d, a);\n        store4(&amp;mut decoded_row.get_unchecked_mut(idx..), d);\n\n        idx += 4;\n        rb -= 4;\n    }\n}\n\nSo instead of loading, adding, and storing one byte at a time, we can operate on 4 bytes at a time. Let's benchmark this implementation to see how it performs.\n#[bench]\nfn bench_sub_sse2(b: &amp;mut Bencher) {\n    let raw_row = std::hint::black_box([10; BUFFER_SIZE]);\n    let mut decoded_row = std::hint::black_box([0; BUFFER_SIZE]);\n\n    b.iter(|| unsafe { sub_sse2(&amp;*raw_row, &amp;mut *decoded_row) });\n\n    std::hint::black_box(decoded_row);\n}\n\nWhen we benchmark this time, we want to make use of SIMD intrinsics. To force LLVM to compile them optimally we'll have to configure target-cpu=native. If we don't do this, our intrinsics will be compiled suboptimally and we actually tend to get slower code than the scalar version, at least on my Linux machine.\nRUSTFLAGS='-Ctarget-cpu=native' cargo bench\n\nrunning 4 tests\ntest tests::bench_baseline_memcpy     ... bench:      62,844 ns/iter (+/- 3,258)\ntest tests::bench_sub_naive_scalar    ... bench:      86,798 ns/iter (+/- 1,502)\ntest tests::bench_sub_no_bound_checks ... bench:      86,719 ns/iter (+/- 2,057)\ntest tests::bench_sub_sse2            ... bench:      86,573 ns/iter (+/- 1,004)\n\nPretty much no improvement. We saw previously that LLVM was able to autovectorize our loop to operate on 4 bytes at a time already, so this is likely the explanation for why our explicit SIMD implementation isn't too much faster. It could be that we missed something in porting the C code, but that seems unlikely here. In general, it doesn't seem that we can get a massive win if we're stuck operating on bpp bytes at a time.\nTrying a Different Algorithm\nAbout a year ago, I had the idea to try solving the PNG filters using AVX and AVX2. AVX enables us to operate on 32 bytes at a time, compared to our current implementation that operates on at most 4 bytes at a time. If we're able to use AVX registers and instructions, we'd be able to operate on 8x the number of bytes as existing implementations of the filters.\nAfter playing around with the problem for a while, I realized1 that decoding the sub filter can be pretty trivially reduced down to a pretty well-studied problem called prefix sum. Prefix sum happens to be extremely easy to compute in parallel, which makes our problem a lot simpler.\nThe idea behind parallel prefix sum is that you can trivially subdivide the problem and then combine the results of the separate executions. Let's take a simple example:\nGiven an array [1, 2, 3, 4], the serial solution would be to just loop over the entire array. In a parallel version, we can split this array into [1, 2] and [3, 4] and compute the prefix sums separately. Then, we can take the last element of the first array and add it to each element in the second array. We'll call this the accumulate step.\nSo after executing the prefix sum step, we end up with the two arrays [1, 3] and [3, 7]. Then we apply the accumulate step and end up with two arrays [1, 3] and [6, 10]. Combining them, we get [1, 3, 6, 10] which is the correct prefix sum result we're looking for.\nThis sounds like we're doing more work — and we are. But these kinds of operations are really fast in SIMD, so the actual number of instructions per byte is significantly less than in the scalar solution.\nAlgorithmica has a pretty good explanation of vectorized prefix sum that goes quite a bit deeper than we need to for this problem, but is a great read if you're interested in learning more.\nWe'll actually end up with something that looks very similar to algorithmica's first vectorized example. The only difference is that the algorithm presented by algorithmica operates on 32-bit integers in sequence, while we want to operate on 8-bit bytes offset by bpp. When bpp is 4, this looks strikingly similar to just adding 32-bit integers.\nFor the accumulate step, we're going to use _mm256_extract_epi32. I wasn't able to port their accumulate implementation very well, but I'd assume it compiles down to roughly the same thing.\nHere's our implementation of the sub filter using the full width of AVX registers:\npub unsafe fn sub_avx(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    let mut last = 0;\n    let mut x: __m256i;\n\n    let len = raw_row.len();\n    let mut i = 0;\n\n    // we ensure the length in our SIMD loop is divisible by 32\n    let offset = len % 32;\n    if offset != 0 {\n        sub_sse2(raw_row.get_unchecked(..offset), decoded_row.get_unchecked_mut(..offset));\n        last = i32::from_be_bytes([\n            *decoded_row.get_unchecked(offset - 1),\n            *decoded_row.get_unchecked(offset - 2),\n            *decoded_row.get_unchecked(offset - 3),\n            *decoded_row.get_unchecked(offset - 4),\n        ]);\n        i = offset;\n    }\n\n    while len != i {\n        // load 32 bytes from input array\n        x = _mm256_loadu_si256(raw_row.get_unchecked(i) as *const _ as *const __m256i);\n\n        // do prefix sum\n        x = _mm256_add_epi8(_mm256_slli_si256::&lt;4&gt;(x), x);\n        x = _mm256_add_epi8(_mm256_slli_si256::&lt;{ 2 * 4 }&gt;(x), x);\n\n        // accumulate for first 16 bytes\n        let b = _mm256_extract_epi32::&lt;3&gt;(x);\n        x = _mm256_add_epi8(_mm256_set_epi32(b, b, b, b, 0, 0, 0, 0), x);\n\n        // accumulate for previous chunk of 16 bytes\n        x = _mm256_add_epi8(_mm256_set1_epi32(last), x);\n\n        // extract last 4 bytes to be used in next iteration\n        last = _mm256_extract_epi32::&lt;7&gt;(x);\n\n        // write 32 bytes to out array\n        _mm256_storeu_si256(decoded_row.get_unchecked_mut(i) as *mut _ as *mut __m256i, x);\n\n        i += 32;\n    }\n}\n\nWe can reuse our SSE implementation for our remainder loop at the start. How does this perform?\nRUSTFLAGS='-Ctarget-cpu=native' cargo bench\n\nrunning 5 tests\ntest tests::bench_baseline_memcpy     ... bench:      61,624 ns/iter (+/- 3,384)\ntest tests::bench_sub_avx             ... bench:      82,168 ns/iter (+/- 3,754)\ntest tests::bench_sub_naive_scalar    ... bench:      86,713 ns/iter (+/- 3,411)\ntest tests::bench_sub_no_bound_checks ... bench:      86,567 ns/iter (+/- 1,432)\ntest tests::bench_sub_sse2            ... bench:      86,422 ns/iter (+/- 3,934)\n\nWe get something that's a bit faster. It isn't too much above noise, but in my testing it does appear to run consistently ~5% faster. That's not nothing, but it's definitely a much smaller win than we'd expect from operating on 8x the number of bytes at a time. It's likely that although we're now able to operate on a larger number of bytes at a time, our wins are being consumed by the extra processing we're now doing to perform prefix sum.\nThis is roughly where I left things for about a year. I came back to this problem every once in a while after being inspired by blog posts, reading code, or learning about interesting applications of x86 SIMD intrinsics, but in general I wasn't able to improve on this problem too much.\nThe particularly slow part is _mm256_extract_epi32, especially the second call with a value of 7. For values above 3, this intrinsic will compile down to multiple expensive instructions. If we remove this intrinsic, we approach the speed of memcpy. However, we can't really remove this intrinsic, since it's necessary for the accumulate step.\nLast week, as part of a larger blog post investigating the performance of PNG decoders, I revisited this problem. For the sake of completion, I was interested to see how a similar algorithm would perform if we used SSE registers instead.\nThe initial implementation looks like this:\npub unsafe fn sub_sse_prefix_sum(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    let mut last = 0;\n    let mut x: __m128i;\n\n    let len = raw_row.len();\n    let mut i = 0;\n\n    let offset = len % 16;\n    if offset != 0 {\n        sub_sse2(raw_row.get_unchecked(..offset), decoded_row.get_unchecked_mut(..offset));\n        last = i32::from_be_bytes([\n            *decoded_row.get_unchecked(offset - 1),\n            *decoded_row.get_unchecked(offset - 2),\n            *decoded_row.get_unchecked(offset - 3),\n            *decoded_row.get_unchecked(offset - 4),\n        ]);\n        i = offset;\n    }\n\n    while len != i {\n        // load 16 bytes from array\n        x = _mm_loadu_si128(raw_row.get_unchecked(i) as *const _ as *const __m128i);\n\n        // do prefix sum\n        x = _mm_add_epi8(_mm_slli_si128::&lt;4&gt;(x), x);\n        x = _mm_add_epi8(_mm_slli_si128::&lt;{ 2 * 4 }&gt;(x), x);\n\n        // accumulate for previous chunk of 16 bytes\n        x = _mm_add_epi8(x, _mm_set1_epi32(last));\n\n        last = _mm_extract_epi32::&lt;3&gt;(x);\n\n        // write 16 bytes to out array\n        _mm_storeu_si128(decoded_row.get_unchecked_mut(i) as *mut _ as *mut __m128i, x);\n\n        i += 16;\n    }\n}\n\nThis is pretty much the same as our AVX implementation, except now we operate on 16 bytes at a time. Let's see how this performs:\nrunning 6 tests\ntest tests::bench_baseline_memcpy     ... bench:      61,482 ns/iter (+/- 10,144)\ntest tests::bench_sub_avx             ... bench:      82,137 ns/iter (+/- 623)\ntest tests::bench_sub_naive_scalar    ... bench:      86,471 ns/iter (+/- 2,308)\ntest tests::bench_sub_no_bound_checks ... bench:      86,571 ns/iter (+/- 9,310)\ntest tests::bench_sub_sse2            ... bench:      86,146 ns/iter (+/- 2,569)\ntest tests::bench_sub_sse_prefix_sum  ... bench:     113,024 ns/iter (+/- 1,683)\n\nIt's quite a bit slower. I guess that's to be expected. The AVX implementation operates on 2x the number of bytes and only gets a 5% speedup. If we only use SSE registers, we don't see any gains.\nBut, something interesting about using SSE registers is that we can actually avoid the extract by doing a bitshift and a broadcast. Let's look at an implementation using this,\npub unsafe fn sub_sse_prefix_sum_no_extract(raw_row: &amp;[u8], decoded_row: &amp;mut [u8]) {\n    let mut last = _mm_setzero_si128();\n    let mut x: __m128i;\n\n    let len = raw_row.len();\n    let mut i = 0;\n\n    let offset = len % 16;\n    if offset != 0 {\n        sub_sse2(raw_row.get_unchecked(..offset), decoded_row.get_unchecked_mut(..offset));\n        last = _mm_castps_si128(_mm_broadcast_ss(&amp;*(decoded_row.get_unchecked(offset - 4) as *const _ as *const f32)));\n        i = offset;\n    }\n\n    while len != i {\n        // load 16 bytes from array\n        x = _mm_loadu_si128(raw_row.get_unchecked(i) as *const _ as *const __m128i);\n\n        // do prefix sum\n        x = _mm_add_epi8(_mm_slli_si128::&lt;4&gt;(x), x);\n        x = _mm_add_epi8(_mm_slli_si128::&lt;{ 2 * 4 }&gt;(x), x);\n\n        // accumulate for previous chunk of 16 bytes\n        x = _mm_add_epi8(x, last);\n\n        // shift right by 12 bytes and then broadcast the lower 4 bytes\n        // to the rest of the register\n        last = _mm_srli_si128::&lt;12&gt;(x);\n        last = _mm_broadcastd_epi32(last);\n\n        _mm_storeu_si128(decoded_row.get_unchecked_mut(i) as *mut _ as *mut __m128i, x);\n\n        i += 16;\n    }\n}\n\nRunning the benchmarks:\nrunning 7 tests\ntest tests::bench_baseline_memcpy               ... bench:      62,683 ns/iter (+/- 18,025)\ntest tests::bench_sub_avx                       ... bench:      82,232 ns/iter (+/- 9,210)\ntest tests::bench_sub_naive_scalar              ... bench:      86,680 ns/iter (+/- 2,137)\ntest tests::bench_sub_no_bound_checks           ... bench:      86,756 ns/iter (+/- 1,310)\ntest tests::bench_sub_sse2                      ... bench:      86,519 ns/iter (+/- 2,527)\ntest tests::bench_sub_sse_prefix_sum            ... bench:     112,770 ns/iter (+/- 4,366)\ntest tests::bench_sub_sse_prefix_sum_no_extract ... bench:      69,864 ns/iter (+/- 1,696)\n\n\nIt's a lot faster! We're approaching the speed of memcpy. With this new algorithm, we can go ~25% faster than a naive approach operating on only 4 bytes at a time. It seems hard to improve on this further — at some point we'll be bound by memory. As a proof of concept for this algorithm, I think this works quite well. It may be possible to improve on this by making better use of AVX intrinsics, but for right now it's likely not worth the effort to optimize this further.\nImpact of this research\nThe goal up to this point has largely been to demonstrate that this algorithm can improve the performance of PNG decoding. The work demonstrated here is a proof-of-concept and doesn't contain a production-ready implementation.\nThe sub filter is just a small part of PNG decoding. Although we managed to speed it up by 25% for inputs of this size, this doesn't correlate to a 25% improvement of PNG decoding. The exact improvement here is a bit hard to calculate as it depends heavily on the input — the dimensions of the PNG, DEFLATE's compression level, the distribution of filters, etc. In general I wouldn't expect this to be too large of a win in total decode time, but it may become meaningful if you're trying to write the fastest theoretical PNG decoder (this is foreshadowing).\nI think it may be possible to apply similar ideas to the avg and paeth filters, but I haven't yet come up with a performant solution for them. One particularly painful issue with the avg filter is that the average is taken with 9 bits of precision, rather than 8, and then truncated — so it's not sufficient to just do a bitshift in order to divide by two. Future research here may involve the VPAVGB instruction.\nI haven't yet investigated the paeth filter, so I'm not sure how difficult such a solution for this filter would be. At first glance it appears quite a bit more challenging than the other filters, but there may be a clever solution hiding somewhere.\n1\nThe intuition for this may be a bit challenging to come up with if you're not already familiar with prefix sum and its properties. I believe this particular idea came to me by just staring at an example execution for a bit.\n\n\n\n","id":"https://connorskees.github.io/blog/avx-png-filter/","title":"Researching Novel Algorithms to Decode PNG Filters"},"https://connorskees.github.io/blog/bf-compiler/":{"body":"\nBrainfuck is a programming language which, as the name might suggest, was designed to be confusing. Brainfuck programs consist of only 8 characters: +-&gt;&lt;[],.. All other characters in a .bf file are ignored by the language. Here's what a simple \"hello, world\" program looks like in BF:\n++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\n\nBF has two pointers, one for instructions and one for data. The data pointer points somewhere inside a contiguous block of memory, and the instruction pointer points to the instruction currently being executed.\nThe BF operators have these semantics:\n\n&gt;: increment the data pointer by 1\n&lt;: decrement the data pointer by 1\n+: increment the value pointed to by the data pointer by 1\n-: decrement the value pointed to by the data pointer by 1\n.: print the value pointed to by the data pointer\n,: read a single byte from stdin and store it at the position pointed to by the data pointer\n[: if the value pointed to by the data pointer is 0, then jump to the instruction after a matching ]. otherwise continue\n]: if the value pointed to by the data pointer is not 0, then jump to the instruction after a matching [. otherwise continue\n\nThese 8 operators are technically enough to make BF turing complete, though doing even simple tasks involves a massive number of characters and it quickly becomes hard to reason about programs.\nBF lacks types, variables, functions, and even idioms for doing things like multiplication, which makes it very hard to write. But conversely, this makes it very easy to write an implementation. We can skip things like parsing and typechecking, and just go straight to compilation. \nWriting a Brainfuck Interpreter\nInterpreters are generally easier to write than compilers. You don't need to know assembly or any complex compiler algorithms — you just need to know the semantics of your operation and you can implement it in whatever language you want. We'll start by writing a simple BF interpreter to get a sense of BF's semantics, and also so that we have something to compare our compiler to.\nThe first thing we need to do for our interpreter is initialize the data and the instruction buffers. This is actually not that dissimilar to how your operating system loads executable files. \nOur data buffer is just an array of 8-bit bytes called \"cells.\" In brainfuck we have to provide the language with at least 30,000 cells, though we could go much higher than that if we wanted to.\nlet mut data_buffer = vec![0_u8; 30_000];\n\nFor the instruction buffer, let's start with just hardcoding the instructions, and then later, if we want to, we can support things like reading from files.\n// hello, world\nlet instruction_buffer = b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\";\n\nWe also need to initialize our data and instruction pointers.\nlet mut data_ptr = 0_usize;\nlet mut instruction_ptr = 0_usize;\n\nThe concept of an instruction pointer might sound similar if you already know a bit of assembly. In x86 this is the rip/eip/ip register.\nNow that we have our buffers and pointers initialized, we can start writing our interpreter loop. Our program executes until the instruction pointer reaches the end of our instructions.\nwhile instruction_ptr &lt; instruction_buffer.len() {\n    // ...\n}\n\nThen we can start implementing the functionality inside our loop,\nmatch instruction_buffer[instruction_ptr] {\n    b'&gt;' =&gt; todo!(),\n    b'&lt;' =&gt; todo!(),\n    b'+' =&gt; todo!(),\n    b'-' =&gt; todo!(),\n    b'.' =&gt; todo!(),\n    b',' =&gt; todo!(),\n    b'[' =&gt; todo!(),\n    b']' =&gt; todo!(),\n    _ =&gt; {},\n}\n\n// after executing each instruction, increment the instruction pointer to the next instruction\ninstruction_ptr += 1;\n\nThe first 4 operators are pretty simple.\nb'&gt;' =&gt; data_ptr += 1,\nb'&lt;' =&gt; data_ptr -= 1,\nb'+' =&gt; data_buffer[data_ptr] += 1,\nb'-' =&gt; data_buffer[data_ptr] -= 1,\n\nIn the case of + and -, we actually have a small issue. In rust, integer overflow is defined to panic in debug builds. Brainfuck is fine with overflow, and even expects it. To avoid crashes in debug mode, we need our addition and subtraction to be explicitly wrapping.\nb'+' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_add(1),\nb'-' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_sub(1),\n\nGreat. Now we can implement . and ,.\nb'.' =&gt; print!(\"{}\", char::from(data_buffer[data_ptr])),\nb',' =&gt; {\n    use std::io::Read;\n    let mut byte = [0];\n    let mut stdin = std::io::stdin();\n    // read single byte\n    stdin.read_exact(&amp;mut byte).unwrap();\n    // drop rest of line\n    stdin.read_line(&amp;mut String::new()).unwrap();\n    // store in memory\n    data_buffer[data_ptr] = byte[0];\n}\n\n. just prints a single character to stdout based on the value pointed to by the data ptr. , looks a lot more complicated, but it's basically just doing the same thing in reverse. It reads a single byte from stdin and stores it in memory. The API for doing this in rust is a bit more complicated, because it's not nearly as common as printing.\nThe last two operators are [ and ], which are used to implement a form of goto. These instructions allow you to jump to the matching instruction, which is actually very similar to how control flow works in WebAssembly. There's lot of ways you can implement this, but we'll start with the simplest: loop over the instructions until we find a match.\nb'[' =&gt; {\n    // point to next instruction\n    instruction_ptr += 1;\n\n    // if the data isn't 0, execute the next instruction. otherwise we need to jump\n    // to the matching `]` instruction\n    if data_buffer[data_ptr] != 0 {\n        continue;\n    }\n\n    // we need to find the closing brace matching this one, not just the first\n    // closing brace we see\n    let mut num_open_brackets = 0;\n\n    while instruction_ptr &lt; instruction_buffer.len() {\n        match instruction_buffer[instruction_ptr] {\n            b'[' =&gt; num_open_brackets += 1,\n            b']' =&gt; {\n                // if no open brackets, then we found our match\n                if num_open_brackets == 0 {\n                    instruction_ptr += 1;\n                    break;\n                // otherwise, \"close\" a bracket\n                } else {\n                    num_open_brackets -= 1;\n                }\n            }\n            _ =&gt; {}\n        }\n\n        instruction_ptr += 1;\n    }\n\n    continue;\n}\n\nHere, we either execute the following instruction if data_buffer[data_ptr] is 0, otherwise we jump to the instruction after the matching ]. The code for implementing ] looks very similar, but we iterate in reverse.\nPutting everything together:\nfn main() {\n    let mut data_buffer = vec![0_u8; 30_000];\n    let instruction_buffer = b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\";\n\n    let mut data_ptr = 0_usize;\n    let mut instruction_ptr = 0_usize;\n\n    while instruction_ptr &lt; instruction_buffer.len() {\n        match instruction_buffer[instruction_ptr] {\n            b'&gt;' =&gt; data_ptr += 1,\n            b'&lt;' =&gt; data_ptr -= 1,\n            b'+' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_add(1),\n            b'-' =&gt; data_buffer[data_ptr] = data_buffer[data_ptr].wrapping_sub(1),\n            b'.' =&gt; print!(\"{}\", char::from(data_buffer[data_ptr])),\n            b',' =&gt; {\n                use std::io::Read;\n                let mut byte = [0];\n                let mut stdin = std::io::stdin();\n                // read single byte\n                stdin.read_exact(&amp;mut byte).unwrap();\n                // drop rest of line\n                stdin.read_line(&amp;mut String::new()).unwrap();\n                // store in memory\n                data_buffer[data_ptr] = byte[0];\n            }\n            b'[' =&gt; {\n                // point to next instruction\n                instruction_ptr += 1;\n\n                // if the data is 0, execute the next instruction. otherwise we need to jump\n                // to the matching `]` instruction\n                if data_buffer[data_ptr] != 0 {\n                    continue;\n                }\n\n                // we need to find the closing brace matching this one, not just the first\n                // closing brace we see\n                let mut num_open_brackets = 0;\n\n                while instruction_ptr &lt; instruction_buffer.len() {\n                    match instruction_buffer[instruction_ptr] {\n                        b'[' =&gt; num_open_brackets += 1,\n                        b']' =&gt; {\n                            // if no open brackets, then we found our match\n                            if num_open_brackets == 0 {\n                                instruction_ptr += 1;\n                                break;\n                            // otherwise, \"close\" a bracket\n                            } else {\n                                num_open_brackets -= 1;\n                            }\n                        }\n                        _ =&gt; {}\n                    }\n\n                    instruction_ptr += 1;\n                }\n\n                continue;\n            }\n            b']' =&gt; {\n                if data_buffer[data_ptr] == 0 {\n                    instruction_ptr += 1;\n                    continue;\n                }\n\n                let mut num_close_brackets = 0;\n\n                instruction_ptr -= 1;\n\n                while instruction_ptr &lt; instruction_buffer.len() {\n                    match instruction_buffer[instruction_ptr] {\n                        b'[' =&gt; {\n                            // if no close brackets, then we found our match\n                            if num_close_brackets == 0 {\n                                instruction_ptr += 1;\n                                break;\n                            // otherwise, \"close\" a bracket\n                            } else {\n                                num_close_brackets -= 1;\n                            }\n                        }\n                        b']' =&gt; num_close_brackets += 1,\n                        _ =&gt; {}\n                    }\n\n                    instruction_ptr -= 1;\n                }\n\n                continue;\n            }\n\n            _ =&gt; {}\n        }\n\n        instruction_ptr += 1;\n    }\n}\n\n$ cargo r -q\nHello World!\n\nIt works! We successfully implemented a brainfuck interpreter.\nBut we have a problem. Our interpreter is super slow. If we try running this program to find all the primes under a given number, it takes way too long.\n$ cargo b --release\n$ ./target/release/bf\n9\n9\n\n\nPrimes up to: 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n\nOn my machine it takes around 400ms to execute this program if I hard code the input. That's pretty bad!\nOptimizing [ and ]\nBefore doing anything more drastic, we can make our implementation of control flow a bit nicer by introducing an intermediate representation.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt;\n    AngleGt,\n    /// &lt;\n    AngleLt,\n    /// +\n    Plus,\n    /// -\n    Minus,\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen(usize),\n    /// ]\n    BracketClose(usize),\n}\n\nThen we can write a simple parser to convert the input to this representation.\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    let mut open_idxs = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' =&gt; instructions.push(Instruction::AngleGt),\n            b'&lt;' =&gt; instructions.push(Instruction::AngleLt),\n            b'+' =&gt; instructions.push(Instruction::Plus),\n            b'-' =&gt; instructions.push(Instruction::Minus),\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; {\n                let idx = instructions.len();\n                open_idxs.push(idx);\n                // placeholder value to be filled in when we find the matching `]`\n                instructions.push(Instruction::BracketOpen(0));\n            },\n            b']' =&gt; {\n                let idx = instructions.len();\n                let matching_brace = open_idxs.pop().unwrap();\n                instructions.push(Instruction::BracketClose(matching_brace));\n                instructions[matching_brace] = Instruction::BracketOpen(idx);\n            },\n            _ =&gt; {},\n        }\n    }\n\n    instructions\n}\n\nOur match statement looks roughly the same, but the implementation of [ and ] can become a lot simpler.\nlet instruction_buffer = parse_instructions(b\"++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\");\n\n// ...\n\nmatch instruction_buffer[instruction_ptr] {\n    // ...\n    Instruction::BracketOpen(jmp) =&gt; {\n        if data_buffer[data_ptr] != 0 {\n            instruction_ptr += 1;\n        } else {\n            instruction_ptr = jmp + 1;\n        }\n\n        continue;\n    }\n    Instruction::BracketClose(jmp) =&gt; {\n        if data_buffer[data_ptr] == 0 {\n            instruction_ptr += 1;\n        } else {\n            instruction_ptr = jmp + 1;\n        }\n\n        continue;\n    }\n}\n\nThis is way simpler than traversing all the instructions to find the matching instruction each time. After making this change, our program to find all the primes under 99 takes about 200ms on my machine. 2x faster, but still not enough! We can do better.\nWriting a Compiler\nA compiler is a program that takes a programming language and compiles it to some sort of lower level language. Compilers for modern programming languages are huge and involve insane optimizations and complex type systems. We won't be worrying about any of that. Our first compiler is going to be as simple as possible.\nWhat exactly are we compiling our program to?\nYour CPU doesn't understand assembly. It understands machine code. Assembly is roughly the textual representation of machine code, but there are usually a few differences.\nTo convert assembly into machine code your CPU can understand, we need to use an assembler. Then, to create an executable your operating system can run, we need to use a linker.\nWriting Assembly\nWe're going to do something a bit hacky. There aren't any good libraries for going from assembly to executable in rust, so we're going to do string concatenation and then run nasm on the result. iced_x86 is a great library for assembling and disassembling x86, but has some issues with generating full binaries that make it unsuitable for our purposes here. iced_x86 would be a great choice for a JIT compiler.\nWe'll initialize our assembly string like so,\nlet mut asm = String::new();\n\nWe need to start by setting some nasm boilerplate and creating our entrypoint. By convention the entrypoint to our program is named _start on Linux and start on Mac. I'm compiling this on Linux, so all the code examples below will use the Linux conventions, but I'll mention when there are differences for Mac.\n%use masm\n\nBITS 64\n\nsection .text\n\nglobal _start\n\n_start:\n\nWith that out of the way, how do we translate our interpreter to a compiler?\nThe first thing we want to think about is where to store the data pointer and the instruction pointer.\nThe instruction pointer is pretty easy — x86 already provides us a register called rip which is exactly that. Plus, reusing the rip for moving between instructions lets us reuse jmp instructions and labels to do our control flow with [ and ].\nFor the data pointer, we can store its value pretty much anywhere. Let's choose rbx since it's not really used by other constructs, like calling functions or syscalls.\nThe next question is, where do we store our data? In our interpreter, we allocate a block of 30,000 bytes in memory and initialize it all to 0. That memory never grows during our program so we'd actually be fine storing it in the data section of our binary. We can initialize that memory in our assembly like this:\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nThis declares a data section, and then initializes a buffer of 30,000 bytes to 0. We can reference data_buffer just like a label or a variable. The value of data_buffer is just a pointer to our initialized buffer of memory. For simplicity we'll declare this section in our boilerplate at the start, but it could also go anywhere in our program.\nTo start our program, we need to store the pointer to data_buffer in rbx. That's pretty simple: mov rbx, data_buffer.\nSo our actual prelude is:\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\n    mov rbx, data_buffer\n\n; the rest of our compiled code\n\nNow we've translated our pointers and memory. It's time to start working on the instructions.\nLike before, we loop through all our instructions.\nfn main() {\n    let instructions = parse_instructions(b\"...\");\n\n    let mut asm = String::new();\n\n    // ...\n\n    for inst in instructions {\n        match inst {\n            // ...\n        }\n    }\n}\n\nAnd just like our interpreter, we can start filling out our match statement.\nInstruction::AngleGt =&gt; asm += \"add rbx, 1\\n\",\nInstruction::AngleLt =&gt; asm += \"sub rbx, 1\\n\",\n\n&gt; and &lt; increment and decrement the data pointer respectively. Here, rbx holds our data pointer so we modify its value directly.\nInstruction::Plus =&gt; asm += \"add BYTE PTR [rbx], 1\\n\",\nInstruction::Minus =&gt; asm += \"sub BYTE PTR [rbx], 1\\n\",\n\n+ and - increment and decrement the value pointed to by rbx respectively. The [rbx] in this syntax is a pointer dereference, so we're not modifying rbx directly, but rather the byte it's pointing to.\n, and . are bit more complicated. They read from stdin and write to stdout respectively. To do that, we need to make syscalls. Syscalls are functions provided to us by the operating system. \nSyscalls, just like regular function calls in assembly, have specific calling conventions. We store the arguments in registers and execute the syscall instruction. To tell the operating system which syscall we want to make, we set the value in rax to a predefined number. For the write syscall, this number is 1 on Linux and 0x02000004 on Mac. \nThe write syscall takes 3 arguments: the file handle, a pointer to the message to be written, and the number of bytes to write of that message. The Linux and Mac syscall ABI follow the \"diane's silk dress costs $89\" mnemonic, meaning we pass in arguments in the order rdi, rsi, rdx, rcx, r8, and r9. Here we only have 3 arguments, so we just need to use the first 3 registers.\n; select the write syscall on Linux\nmov rax, 1\n; file handle (1 for stdout)\nmov rdi, 1\n; pointer to message, which is our data buffer\nmov rsi, rbx\n; number of bytes to write, which is 1\nmov edx, 1\nsyscall\n\nThis is our implementation of ., which prints to stdout. Next we have to do a read.\nThe API for read is pretty similar. It takes a file descriptor (0 for stdin), a pointer to somewhere in memory to write, and the number of bytes to read from stdin.\n; select the read syscall on Linux\nmov rax, 0\n; file handle (0 for stdin)\nmov rdi, 0\n; pointer to message, which is our data buffer\nmov rsi, rbx\n; number of bytes to read, which is 1\nmov edx, 1\nsyscall\n\nFinally we have to compile our control flow instructions, [ and ].\nWe're going to compile our loops to look something like this:\nloop_start:\n; condition\njmp loop_end\n; loop code\njmp loop_start\nloop_end:\n; other instructions\n\nWe have to give each loop label a unique identifier, otherwise their labels would conflict with each other. We can do this pretty simply by keeping a strictly increasing integer which we increment every time we encounter a [. To match our ] to [, we can keep a stack, similar to our optimization for matching braces in our interpreter.\nlet mut label_count = 0;\nlet mut labels = Vec::new();\n\nAnd then in our match statement:\nInstruction::BracketOpen(..) =&gt; {\n    let loop_idx = label_count;\n    label_count += 1;\n\n    asm += &amp;format!(\"\n        cmp BYTE PTR [rbx], 0\n        je loop{loop_idx}_close\n        loop{loop_idx}_open:\n    \");\n\n    labels.push(loop_idx);\n}\n\nIn our closing brace code we need to pop off the labels stack and jump to the start.\nInstruction::BracketClose(jmp) =&gt; {\n    let loop_idx = labels.pop().unwrap();\n\n    asm += &amp;format!(\"\n        cmp BYTE PTR [rbx], 0\n        jne loop{loop_idx}_open\n        loop{loop_idx}_close:\n    \");\n}\n\nAnd that's it! Now we just have to make our program exit gracefully. It can do that by calling the exit syscall with an error code of 0.\n; select the exit syscall on Linux\nmov rax, 60\n; set exit code in rdi to 0\nxor rdi, rdi\nsyscall\n\nThat's everything we need to write a compiler for brainfuck. Let's try printing out asm and seeing what the codegen looks like.\n$ cargo r\n\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\nmov rbx, data_buffer\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\ncmp BYTE PTR [rbx], 0\nje loop0_close\nloop0_open:\nadd rbx, 1\n\n; ... \n\nmov rax, 60\nxor rdi, rdi\nsyscall\n\nThat looks pretty good to me! We can pipe that to a file and try assembling it with nasm.\n$ cargo r &gt; hello-world.s\n$ nasm -felf64 hello-world.s\n$ ld hello-world.o \n$ ./a.out\nHello World!\n\nIt works!\nCompiler Optimizations\nThis is pretty good, but we can do better. For a simple hello world we generate over 200 instructions. \nOur assembly is pretty suboptimal, so we have plenty of room to improve. Take this sample from our assembly:\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\nadd BYTE PTR [rbx], 1\n\nWe have strings of +++++ all over our hello world code, to increment the memory to a given character value. These repeated additions by 1 could be simplified into a single addition by a larger number.\nTo start optimizing, we need to change our intermediate representation a bit. Instead of separating out &lt;/&gt; and +/-, we can combine them in our intermediate representation. &lt; and - are just adds by negative numbers.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt; and &lt;\n    PointerAdd(isize),\n    /// + and -\n    ValueAdd(isize),\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen,\n    /// ]\n    BracketClose,\n}\n\nIn addition to combining our addition operators, we've added support for arbitrary numbers to +, -, &gt;, and &lt;. This way we can represent ++ as Plus(2). We also removed the offset code from [ and ], since that's handled by our compiler now.\nWe can change our parser to support this new representation.\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' | b'&lt;' =&gt; {\n                let v = match b {\n                    b'&gt;' =&gt; 1,\n                    b'&lt;' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::PointerAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::PointerAdd(v))\n                }\n            }\n            b'+' | b'-' =&gt; {\n                let v = match b {\n                    b'+' =&gt; 1,\n                    b'-' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::ValueAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::ValueAdd(v))\n                }\n            }\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; instructions.push(Instruction::BracketOpen),\n            b']' =&gt; instructions.push(Instruction::BracketClose),\n            _ =&gt; {}\n        }\n    }\n\n    instructions\n}\n\nThis already makes our assembly a lot nicer. \n_start:\nmov rbx, data_buffer\nadd BYTE PTR [rbx], 8\ncmp BYTE PTR [rbx], 0\nje loop0_close\nloop0_open:\nadd rbx, 1\nadd BYTE PTR [rbx], 4\ncmp BYTE PTR [rbx], 0\nje loop1_close\nloop1_open:\nadd rbx, 1\nadd BYTE PTR [rbx], 2\nadd rbx, 1\nadd BYTE PTR [rbx], 3\n\nThere's a couple other low hanging fruit. In our syscalls to read and write, we always set edx to 1, so instead of doing that before each syscall, let's just do it once at the start of our program.\nsection .text\n\nglobal _start\n\n_start:\nmov rbx, data_buffer\nmov edx, 1\n\nThat shaves off about 10 instructions from our hello world program.\nWe can make a similar optimization after realizing that we always set rsi to the value of rbx before doing a syscall. Why don't we just use rsi instead of rbx everywhere, and then we can make instructions like mov rsi, rbx superfluous. This shaves off another 10 instructions.\nloop2_close:\nadd rsi, -1\nadd BYTE PTR [rsi], -1\ncmp BYTE PTR [rsi], 0\njne loop0_open\nloop0_close:\nadd rsi, 2\nmov rax, 1\nmov rdi, 1\nsyscall\nadd rsi, 1\nadd BYTE PTR [rsi], -3\nmov rax, 1\nmov rdi, 1\nsyscall\n\nThere's still plenty of optimization to be done — for example, removing the redundant mov rax, 1 and mov rdi, 1 between sequential write syscalls and trivial things like removing empty loops or additions by 0 — but I think what we have so far is sufficient to get the idea.\nIf we compare our first interpreter to our optimizing compiler on this program which finds all the primes under 2551, our compiled program prints all the primes in 13 seconds. The interpreter ran for several minutes without printing anything before I killed it.\nHere's our final code, if you'd like to modify it to generate ARM assembly or add more optimizations.\n#[derive(Debug, Copy, Clone)]\nenum Instruction {\n    /// &gt; and &lt;\n    PointerAdd(isize),\n    /// + and -\n    ValueAdd(isize),\n    /// .\n    Dot,\n    /// ,\n    Comma,\n    /// [\n    BracketOpen,\n    /// ]\n    BracketClose,\n}\n\nfn parse_instructions(bytes: &amp;[u8]) -&gt; Vec&lt;Instruction&gt; {\n    let mut instructions = Vec::new();\n\n    for b in bytes {\n        match b {\n            b'&gt;' | b'&lt;' =&gt; {\n                let v = match b {\n                    b'&gt;' =&gt; 1,\n                    b'&lt;' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::PointerAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::PointerAdd(v))\n                }\n            }\n            b'+' | b'-' =&gt; {\n                let v = match b {\n                    b'+' =&gt; 1,\n                    b'-' =&gt; -1,\n                    _ =&gt; unreachable!(),\n                };\n\n                if let Some(Instruction::ValueAdd(n2)) = instructions.last_mut() {\n                    *n2 += v;\n                } else {\n                    instructions.push(Instruction::ValueAdd(v))\n                }\n            }\n            b'.' =&gt; instructions.push(Instruction::Dot),\n            b',' =&gt; instructions.push(Instruction::Comma),\n            b'[' =&gt; instructions.push(Instruction::BracketOpen),\n            b']' =&gt; instructions.push(Instruction::BracketClose),\n            _ =&gt; {}\n        }\n    }\n\n    instructions\n}\n\nfn main() {\n    let instructions = parse_instructions(b\"\n        ++++++++[&gt;++++[&gt;++&gt;+++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;+&gt;+&gt;-&gt;&gt;+[&lt;]&lt;-]&gt;&gt;.&gt;---.+++++++..+++.&gt;&gt;.&lt;-.&lt;.+++.------.--------.&gt;&gt;+.&gt;++.\n    \");\n\n    let mut asm = String::new();\n\n    // nasm setup\n    asm += \"\\\n%use masm\n\nBITS 64\n\nsection .data\n\ndata_buffer: db 30000 dup (0)\n\nsection .text\n\nglobal _start\n\n_start:\nmov rsi, data_buffer\nmov edx, 1\n\";\n\n    let mut label_count = 0;\n    let mut labels = Vec::new();\n\n    for inst in instructions {\n        match inst {\n            Instruction::PointerAdd(n) =&gt; asm += &amp;format!(\"add rsi, {n}\\n\"),\n            Instruction::ValueAdd(n) =&gt; asm += &amp;format!(\"add BYTE PTR [rsi], {n}\\n\"),\n            Instruction::Dot =&gt; {\n                asm += \"\\\n                    mov rax, 1\\n\\\n                    mov rdi, 1\\n\\\n                    syscall\\n\\\n                \";\n            }\n            Instruction::Comma =&gt; {\n                asm += \"\\\n                    mov rax, 0\\n\\\n                    mov rdi, 0\\n\\\n                    syscall\\n\\\n                \"\n            }\n            Instruction::BracketOpen =&gt; {\n                let loop_idx = label_count;\n                label_count += 1;\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rsi], 0\\n\\\n                    je loop{loop_idx}_close\\n\\\n                    loop{loop_idx}_open:\\n\\\n                \"\n                );\n\n                labels.push(loop_idx);\n            }\n            Instruction::BracketClose =&gt; {\n                let loop_idx = labels.pop().unwrap();\n\n                asm += &amp;format!(\n                    \"\\\n                    cmp BYTE PTR [rsi], 0\\n\\\n                    jne loop{loop_idx}_open\\n\\\n                    loop{loop_idx}_close:\\n\\\n                \"\n                );\n            }\n        }\n    }\n\n    // prologue\n    asm += \"\\\n        mov rax, 60\\n\\\n        xor rdi, rdi\\n\\\n        syscall\\n\\\n    \";\n\n    println!(\"{asm}\");\n}\n\n1\nthe code linked only finds the primes up to 30, but can be easily modified to find up to 255\n\n\n\n\n\n\n\n\n","id":"https://connorskees.github.io/blog/bf-compiler/","title":"Writing an x86_64 Compiler for Brainfuck"},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"body":"There are two primary algorithms for traversing trees: breadth-first search (BFS) and depth-first search (DFS).\nIn the iterative case, both algorithms rely on creating an array-like structure that stores the nodes to be visited. The main difference between these two is that in breadth-first search you pop from the front (requiring a double-ended queue), while in depth-first search you pop from the back (requiring a stack).\nDFS is trivial to implement recursively; since it relies on a stack, it can reuse the call-stack. As with all recursive algorithms, in general the iterative form is faster because it avoids the overhead of function calls and has better cache-coherence. BFS, in contrast, is most naturally implemented iteratively.\nThe recursive implementation of DFS can be more elegant, and often uses fewer lines, but I tend to find it harder to extend to more complex problems.\nDFS can be further broken down into pre-order, in-order, and post-order traversal. These traversals change the order in which the root and its left and right children are visited. The specific orderings are:\npre-order: root -&gt; left -&gt; right\nin-order: left -&gt; root -&gt; right\npost-order: left -&gt; right -&gt; root\n\nThe way that I remember this is that the prefix (i.e. pre, in, post) gives the position of root in between left -&gt; right. In other words, pre-order traversal has the root at the start, in-order in the middle, and post-order at the end. Left always comes before right.\nPre-order traversal is useful when you're searching for a particular element in a BST, you are copying the tree, or if you want to visit the root nodes before visiting the leaf nodes.\nIn-order traversal is useful if you wish to get a sorted array of nodes, in the case that the tree being traversed over is a valid binary search tree.\nPost-order traversal is useful if you're deleting a tree (in e.g. C or C++) or if you want to visit the leaf nodes before visiting root nodes.\nFor all examples, I'll use a recursive tree structure that is defined as:\nclass TreeNode:\n    def __init__(self, val: int, left: Optional[TreeNode], right: Optional[TreeNode]):\n        self.val = val\n        self.left = left\n        self.right = right\n\nA simple implementation of DFS looks like this:\ndef dfs(root: TreeNode):\n    stack = [root]\n\n    while stack:\n        node = stack.pop()\n\n        if not node:\n            continue\n\n        # ... do something with node ...\n\n        stack.append(node.left)\n        stack.append(node.right)\n\nThis isn't any particular traversal, and you're free to change it up quite a bit. This is the basic code I use when I need to visit every node in a tree using DFS.\nAs mentioned previously, BFS is the exact same except that you pop from the front:\nfrom collections import deque\n\ndef bfs(root: TreeNode):\n    queue = deque([root])\n\n    while queue:\n        node = queue.popleft()\n\n        if not node:\n            continue\n\n        # ... do something with node ...\n\n        queue.append(node.left)\n        queue.append(node.right)\n\nIn python, we use the deque data structure to get efficient left-popping. If we were to use a regular array, popping from the left would be an O(n) operation, since all the elements in the array would have to be shifted down by 1. The equivalent data structure in Rust is VecDeque.\nBreadth-first search is also called level-order search, as you visit all the nodes in a particular level or row before moving on to the next level. \nIn general it's quite rare to encounter a problem that benefits significantly more with either BFS or DFS. BFS is very useful for finding the shortest path between two nodes. DFS is useful for finding a particular element within the tree. If there is high width and low depth, generally DFS is preferable. Whereas if there is a low width and high depth, BFS is preferable. For a specific input one algorithm may perform better, but in the generic case of all inputs, unless there is some bias in the input, it tends not to matter whether you choose BFS or DFS.\nReturning to the different kinds of DFS traversals:\nFor a DFS that is explicitly pre-order:\ndef dfs_pre_order(root: TreeNode):\n    stack = [root]\n\n    while stack:\n        node = stack.pop()\n\n        if not node:\n            continue\n\n        # ... do something with node ...\n\n        stack.append(node.right)\n        stack.append(node.left)\n\nThis is quite similar to the above DFS example, except that we push the right node on the stack before the left node.\nFor a DFS that is explicitly in-order:\ndef dfs_in_order(root: TreeNode):\n    current = root\n    stack = []\n\n    while stack or current:\n        if current:\n            stack.append(current)\n            current = current.left\n        else:\n            node = stack.pop()\n\n            # ... do something with node ...\n\n            current = node.right\n\nThe difference here is that we now keep track of a new value, current, which we use to traverse the left child nodes prior to the root and right child nodes.\nIt is also possible to implement in-order traversal iteratively using O(1) extra space (i.e. with no stack) using Morris traversal. This algorithm works by temporarily modifying the tree as it is traversed over. It is rare to see this algorithm asked about, so I will omit discussing the particulars here.\nPost-order traversal is slightly more complex than pre- and in- order traversal. In order to visit the leaf nodes before the root nodes, we have to traverse the entire tree to get to the leaf nodes. The simplest implementation is one which uses two stacks. The first to perform a basic DFS, and then the second which is built up during the first DFS:\ndef dfs_post_order(root: TreeNode):\n    stack1 = [root]\n    stack2 = []\n\n    while stack1:\n        node = stack1.pop()\n\n        if not node:\n            continue\n\n        stack2.append(node)\n\n        stack1.append(node.left)\n        stack1.append(node.right)\n\n    while stack2:\n        node = stack2.pop()\n\n        # ... do something with node ...\n\nNote that in the second loop, this is the same as for node in reversed(stack2).\nIt is also possible to implement post-order traversal using a single stack, though I think the implementation is a bit more annoying to remember.\ndef dfs_post_order_one_stack(root: TreeNode):\n    current = root\n    stack = []\n     \n    while current or stack:\n        while current:\n            stack.append(current)\n            stack.append(current)\n            current = current.left\n         \n        node = stack.pop()\n \n        if stack and stack[-1] == node:\n            current = node.right\n        else:\n            # ... do something with node ...\n            current = None\n\n","id":"https://connorskees.github.io/blog/iterative-tree-traversal/","title":"Iterative Binary Tree Traversal"},"https://connorskees.github.io/blog/merge-tree/":{"body":"Merge-tree is a distributed, low-latency B+ tree used to implement real-time collaborative editing of sequences, strings, and matrices.\nThis is an entry-level explanation of the core architecture and algorithms backing the merge-tree data structure and is the sort of explanation I would have wanted in my first 3 months of working on it. The goal of this document is that someone with no context on collaborative editing can be able to reason about the code at a high level.\nThis document only describes the core merge-tree algorithms and does not touch on the ancillary algorithms that are necessary for the merge-tree to function, but which do not live inside the merge-tree itself. This includes problems like persistence, real-time communication, algorithms built on top of merge-tree such as those specific to strings or matrices, and some server-side functionality that will be discussed later.\nAlthough in theory a merge-tree need not operate on text, I find it easiest to reason about the core algorithms in the context of text editing, and so much of the higher-level explanation will center around that.\nOverview\nAt its simplest, a merge-tree defines the following operations:\n\ninsert(index: number, text: string)\nremoveRange(start: number, end: number)\nannotateRange(start: number, end: number, properties: object)\n\nYou can insert text, remove a range of text, or give a key-value property to a range of text. \nThe API of the merge-tree is based around these operations. These can be thought of as JSON payloads containing the above function parameters. For example, { type: \"insert\", index: 0, text: \"foo\" }.\nIn addition to these parameters, each operation (\"op\") has a sequence number associated with it, abbreviated \"seq\". This is a strictly increasing integer that (simplifying a bit)1 is unique to a given operation. The sequence number determines the order in which operations get applied. That is, the operation at seq n must be processed before the op at seq n+1. \nIf you are familiar with sequence numbers in the context of network protocols like TCP, this is very similar.\nThe exact machinery for sequencing ops lives outside of merge-tree and is not necessary for understanding the core algorithms. \nIf we look at a simplified example of an op stream:\n[\n    { \"type\": \"insert\", \"index\": 0, \"text\": \"hello\", \"seq\": 1 },\n    { \"type\": \"remove\", \"start\": 1, \"end\": 5, \"seq\": 2 },\n    { \"type\": \"insert\", \"index\": 1, \"text\": \"i\", \"seq\": 3 },\n]\n\nHere, we have a sequence of ops that constructs the following string:\nseq 1: \"hello\" (insert string \"hello\")\nseq 2: \"h\" (remove range [1-5))\nseq 3: \"hi\" (insert string \"i\")\nThis is relatively straightforward behavior to reason about, and should be roughly what you would expect to see from a regular string data structure used for normal text editing.\nThe complexity of merge-tree comes from its support for collaboration. In order to talk about collaboration, we have to add 2 more fields to our ops: client id (clientId) and reference sequence number (refSeq).\nThe clientId is exactly what it sounds like: a unique identifier for a particular user in a collaboration session. If three people are editing a document in their browser at the same time, each user would be given a unique clientId. In practice these are UUIDs, though merge-tree has some optimizations that convert the UUIDs to small integers by interning them.\nThe reference sequence number is slightly more complex, and will require a bit more background to fully describe.\nIn general, collaboration looks something like this:\nOne user, or client, will create an op and send it to the server. The server will process the op and assign it a sequence number. For the client that sent the op, the server will acknowledge the op and send that client back a sequence number. For the other clients, it will send them this op with the sequence number attached.\nAll clients then process this op and update their refSeq. The refSeq is the sequence number of the last operation that a particular client processed from the server.\nWhen I first started working on merge-tree, I had the misconception that two ops were submitted concurrently if they had the same sequence number, but they are actually concurrent if both ops have a refSeq below the sequence number of the other.\n\nLet's take a look at a simple example with two clients:\nWe'll start with the string \"abc\". We have two clients, \"A\" and \"B\". Both clients insert a single character at position 1 at the same time, without knowing about the existence of the other.\nHere's what our op stream might look like.\n[\n    { seq: 1, refSeq: 0, clientId: \"A\", type: \"insert\", text: \"X\", index: 1 },\n    { seq: 2, refSeq: 0, clientId: \"B\", type: \"insert\", text: \"Y\", index: 1 },\n]\n\nOur string would look like this:\nstart: \"abc\"\nseq 1: \"aXbc\"\nseq 2: \"aYXbc\"\nNote that the refSeq of the two ops is the same. This means that the two operations occurred without either client being aware of the other. The sequence number on client A's op is lower than client B's op. This means that client A's op likely reached the server before client B's, though this does not imply anything about the time that either op occurred. It's also worth mentioning that even if the two ops had reached the server in the exact same nanosecond, they would still have different sequence numbers.\nBecause neither op was aware of the other, we would consider them to be concurrent.\nThe scenario above looks like this in prose:\nWhen the server processes the op from client A, it sends back to client A the sequence number \"1\". It then sends to client B the op from client A.\nOn receiving the sequence number from the server, client A updates its refSeq to be 1.\nBefore client A's op has been sent to client B, client B sends its own op to the server. Client B receives client A's op and updates its refSeq to 1.\nThe server does the same thing for client B's op, and both client A and client B update their refSeq to 2. \nThis should hopefully start to make a bit of sense, but will become clearer once we talk about the internal representation of the merge-tree and go a bit more in depth on collaboration.\nInternal Structure\nMerge-tree represents a sequence as an ordered series of segments, with individual characters or elements being identified by the combination of a segment index and a character offset into that segment, referred to as \"segoff.\" For example, if we take the string \"abcde\" and split it into arbitrary segments:\n[\"a\", \"bcd\", \"e\"]\n\nThe character \"c\" in the above string is at segment 1, offset 1. The character \"e\" is at segment 2, offset 0.\nWhen the endpoints of an operation (like insertion or removal) fall within a segment, that segment is split. For example:\n[\"ae\"] -&gt; insert \"bcd\" at position 1 -&gt; [\"a\", \"bcd\", \"e\"]\n[\"abcde\"] -&gt; remove the range [1, 4] -&gt; [\"a\", \"bcd\", \"e\"] -&gt; [\"a\", \"e\"]\n\nIn order to map a numeric character position to a segoff, the merge-tree traverses the list of segments summing up the length of each segment until it lands inside one. Naively this list of segments can be modeled by a 2d-array, but in practice we represent this as a tree-like structure to efficiently traverse over large sections of the tree at once.\nIf we return back to the [\"a\", \"bcd\", \"e\"] example, to get the segoff of the character at position 4 (\"e\"), we traverse the list of segments until we reach a segment that causes our cumulative length to exceed our position. \nFirst we see \"a\" with a length of 1. Then we see \"bcd\" with a length of 3. Our cumulative length so far being 4. Because our characters are 0-indexed, we're actually looking for the character which causes length to become 5. So we resolve the character position 4 to the segoff { segment: \"e\", offset: 0 }.\nTo get the full length of the string, we would traverse all segments like above, summing up their lengths.\nAdding Basic Collaboration\nSo far we haven't really motivated the reasons behind this array-of-segments structure. To do so, we have to make the segments more useful by adding more bookkeeping.\nMerge-tree is able to simultaneously represent multiple different states by changing the visibility of segments. In practice, queries like \"what is the character in this string at position 3\" and \"what is the full text of this string\" are parameterized by both clientId and refSeq. These two parameters allow us to change the visibility of segments, and therefore see what the string would have looked like from the perspective of different clients at different points in time.\nAll segments have a seq property, which is the sequence number at which they were inserted. Segments also have a removedSeq, an optional sequence number denoting if and when the segment was removed.\nLikewise, all segments have a clientId and removedClientId property, which denote the client that either inserted or removed the segment respectively.\nUsing these properties, and the properties from the op, the merge-tree can determine whether a given op would have been able to see a given segment.\nThe algorithm is this:\nWhen processing a remote op -- i.e. an operation from another client -- that op is able to see all previous operations submitted by that remote client. That is, if op.clientId === segment.clientId, then the segment is visible to that operation during traversal.\nOperations are also able to see all other operations that occurred before or at their refSeq. In code, we would say that all segments with op.refSeq &gt;= segment.seq are visible.\nThe same is also true for removedSeq and removedClientId. If op.clientId === segment.removedClientId, then the segment is not visible, because it has been removed from the perspective of that client. Likewise all segments in which op.refSeq &gt; segment.removedSeq are not visible during traversal.\nThis behavior is extremely powerful and is the basis for all conflict resolution and collaboration within merge-tree.\nLet's look at an example merge-tree written out as json:\n[\n    {\n        \"seq\": 1,\n        \"content\": \"ab\",\n        \"clientId\": \"A\"\n    },\n    {\n        \"seq\": 3,\n        \"content\": \"cd\",\n        \"clientId\": \"B\"\n    },\n    {\n        \"seq\": 2,\n        \"content\": \"e\",\n        \"clientId\": \"A\"\n    }\n]\n\nThis is the string \"abcde\" with segments [\"ab\", \"cd\", \"e\"]. Let's say at this point all clients (\"A\" and \"B\") have a refSeq of 3 and that the current seq is also 3.\nIf client A then inserts the character \"X\" at position 3, we get the string \"abcXde\" with segments [\"ab\", \"c\", \"X\", \"d\", \"e\"]. Our segment \"X\" looks like:\n{\n    \"seq\": 4,\n    \"content\": \"X\",\n    \"clientId\": \"A\"\n}\n\nWhat would happen, though, if client B were to delete the character at position 4 (\"d\") concurrent to client A inserting the character \"X\"?\nLet's say that the deletion operation reaches the server after the insertion operation. The insertion has seq of 4 and the deletion has seq of 5.\nWe'd like for our resulting string to be \"abcXe\". The character \"X\" was inserted between the \"c\" and the \"d\" from the perspective of client A, and the character \"d\" was deleted from the perspective of client B. When we combine these two operations, we want to keep \"X\" in relatively the same position and delete the same character (\"d\").\nOur deletion op looks like this:\n{\n    \"op\": \"remove\",\n    \"seq\": 5,\n    \"refSeq\": 3,\n    \"start\": 3,\n    \"end\": 4, // (range end is exclusive, so does not include the character at position 4)\n    \"clientId\": \"B\"\n}\n\nI'll walk through an example of the algorithms I've described so far.\nTo start removing segments, we need to find which segments fall within the bounds of the remove, [3, 4). If either of those endpoints fall within a segment, that segment must be split. After splitting, we can do a depth-first tree traversal to find the start segment and then continue traversing until we reach the end segment. \nLike before, we walk the segments summing up their length to determine when we reach a given position. In this case, we're looking for a start of 3 and an (exclusive) end of 4.\nAgain, our string consists of the segments [\"ab\", \"c\", \"X\", \"d\", \"e\"]. We start with the segment \"ab\". This segment was inserted at seq 1, which is below our refSeq. It also has no removedSeq. This means that our deletion op knew about this segment, and so it is visible to us.\nWe can add its length of 2 to our running total. The next segment is \"c\", which has the same behavior and we can add its length of 1.\nThe next segment is \"X\", which was inserted by client A at seq 4. With a seq of 4, it was inserted after the refSeq (which is 3) of our remove op. This means the remove op is unaware of this segment, so we can skip it during this traversal. \nThe next segment is \"d\". This segment is visible to the deletion op, and adding its length to our running total puts us over the start position. Now we have our start segment and we can continue traversing the tree until we reach our end position.\nIn this case, that's pretty simple. We only have one segment to delete. \nWe can mark this segment removed by setting its removedSeq and removedClientId to the seq and client id of the op, 5 and \"B\" respectively. \nAll merge-tree ops follow this same pattern: find the position of an index in the tree and update some bookkeeping. In the case of remove and annotate, we change the properties of all the segments in a given range. In the case of insertion, we go to the insertion index, split the segment at that index if necessary, and do a tree insertion.\nLocal Edits\nIf the merge-tree had to wait for an ack from the server every time it made a change, users would more than likely see very high latency between the op for the change being sent and the change being represented in the merge-tree. Especially in the case of multiple users editing the same merge-tree at once, seeing the results of a single edit might mean we need to process 100 ops from other clients before getting to our own.\nThe solution to this is to allow un-acked edits to the merge-tree which are used to create a local state that can be edited immediately and then reaffirmed once we receive an ack from the server.\nTo support local edits, the merge-tree needs additional bookkeeping to keep track of local-only changes. This comes firstly in the form of a local sequence number (localSeq). Much like a regular sequence number, this is a strictly increasing integer that uniquely identifies an operation; however, unlike a regular sequence number, a localSeq is unique to each client and lives completely in memory. localSeqs are not persisted anywhere, and exist only to manage the ephemeral state of local changes before they are acked.\nMaking use of this new local sequence number, segments contain additional bookkeeping the form of localSeq and localRemovedSeq. These are the local sequence numbers at which a segment was inserted or deleted respectively. If a segment has a local sequence number set, the corresponding sequence number is set to a sentinel value of -1. We call this special value the unassigned sequence number.\nSo if a segment has been removed, but that removal is yet unacked, that segment would have a removedSeq of -1 and a localRemovedSeq of whatever the localSeq was at the time of the op. \nOn ack, we are given a proper sequence number for a given local op. We must then traverse the merge-tree to find all the segments which have a local seq and convert their local seq to a proper sequence number. This would mean in our above example, setting the localRemovedSeq to undefined and setting the removedSeq of the sequence number we got back from the server.\nIn practice the merge-tree does additional bookkeeping to associate segments with local ops so that it does not need to traverse the entire tree to identify segments associated with a localSeq, but rather can just look the segments up in a dictionary and modify them all at once.\nReconnect and Rebasing\nSometimes users go offline but continue making edits. In this scenario, if the user comes back online we don't want to just throw away all the changes a user made while they were disconnected.\nThe solution for this in merge-tree is to rebase and resubmit all the operations that were created while offline. \"Rebase\" here is much like the rebasing you may be familiar with in git. We must first apply all the operations that were submitted by other clients while disconnected, updating the ops we submitted while doing so. Then, once these ops have been processed, we can resubmit our ops and hopefully preserve the offline changes.\nZamboni\nOver time, the merge-tree gets filled with a lot of cruft. This comes in two forms: tombstoned segments and fragmentation.\nRemoved segments are not immediately deleted from the merge-tree, but rather marked as removed and live in the tree as tombstones. In long running collaboration sessions, merge-trees can very easily end up with lots of superfluous tombstoned segments.\nOn terminology: here we use \"removed\" to mean deleted from the string from the perspective of the user, i.e. a segment is not visible, and \"deleted\" to mean that the segment is not in the string at all.\nThe other sort of cruft is inefficient segmentation or \"fragmentation.\" This is where we use more segments than is necessary to represent a given string, for example [\"a\", \"b\", \"c\"] vs [\"abc\"]. Over time the merge-tree tends towards this more-segmented structure as more and more ops split the segments. Superfluous segments increase memory usage and the time it takes to walk the tree, as there are more segments to traverse.\nDuring normal operation, the merge-tree needs these tombstoned and split segments to properly function, but there is a point in which this information becomes superfluous. Once all collaborating clients have seen a given insertion or deletion, we can safely delete a tombstoned segment or combine adjacent segments.\nThis process of cleaning up — or \"garbage collecting\" — the merge-tree is called zamboni. In real life, Zambonis clean the top layer of ice on an ice rink. Merge-tree has a similar process here where it cleans up the top (bottom?) layer of its segments incrementally.\nThis leads us into two concepts: the minimum sequence number (minSeq) and the collab(oration) window. The minimum sequence number is how merge-tree is able to know that all clients have seen a given change and represents the minimum of the refSeq of all the participating clients. The collab window is defined in terms of the minSeq, and refers to all the ops that occurred between the minSeq and the current highest sequence number from the server.\nThe minSeq is not tracked directly by the merge-tree, and is an implementation detail of the environment in which it runs.\nWhen the server tells the merge-tree that the minSeq has advanced, it is free to do cleanup of these tombstoned and split segments.\nThe merge-tree keeps track of segments that need cleanup in a min-heap. For every operation (e.g. insert, remove, annotate), the merge-tree inserts into this min-heap the segments affected by that operation, keyed by the sequence number of that operation.\nWhen the minSeq advances, the merge-tree is able to pop segments off of this heap to determine whether they are eligible for zamboni cleanup. If a segment was removed before the minSeq (in other words \"outside the collab window\"), then it can be safely deleted from the tree. Otherwise, if the segment was inserted prior to the minSeq, it can be safely combined with adjacent segments, assuming those segments have identical properties.\nThe concepts of a minSeq and collab window are a large part of what makes merge-tree both novel and efficient. Other, more-academic text editing algorithms rely on having the full edit history of the document persisted forever, while merge-tree is able to only keep exactly what is necessary.\nThere is a small caveat today that zamboni is less effective (perhaps aggressive is a better word) than it could be. The above algorithm also runs during summarization, though during summarization we run a much more aggressive algorithm, essentially settling on the optimal representation of a given merge-tree. Zamboni runs progressively as the minSeq updates and does not always produce the most optimal representation.\nIt should also be noted that the size (number of ops) of the collab window has a big impact on the performance of the merge-tree. Not only does a large collab window result in a lot of cruft that is unable to be cleaned up, there are a number of merge-tree algorithms that are O($$n^2$$) relative to the size of the collab window. Partial lengths updating, which we discuss below, is an example of such an algorithm.\nPartial Lengths\nPartial lengths are an optimization for quickly and efficiently calculating range length queries. Where a merge-tree is like a B+ tree that can represent many states simultaneously, I like to think of partial lengths as a similar structure based on segment trees.\nJust like the merge-tree can answer queries like \"what did the text of the string look like for this user at this point in time,\" partial lengths can answer queries like \"what was the length of this segment for this user at this point in time?\"\nThe goal for this data structure is to efficiently return the sum of the length of the child nodes given a refSeq and client id. By using partial lengths we can quickly skip over large sections of the tree by calculating their length from the perspective of our current operation.\nRecall our example tree traversal above where we sum up segment lengths to reach our desired position. Partial lengths is the structure that allows us to speed up this traversal from O($$number of segments$$) to O($$log (number of segments)$$). This makes partial lengths critical to the efficient use of the merge-tree data structure.\n\n\n\n\nMarkers\nMerge-trees are not limited to working with text, and can support any kind of user-defined segment.\nMarkers are a first-class segment with special behavior implemented by the merge-tree. They are 1-length segments that support accelerated queries for finding the next adjacent marker. Markers are most useful in text editing, where they make it easy to, for example, find the start of the next paragraph or next cell in a table.\nThis acceleration is implemented by keeping a sort of doubly linked list-like data structure with pointers stored on each parent node. Parent nodes are able to navigate to the left or right to find the next adjacent marker(s).\nIn the code today, this behavior is more generic than just applying to markers, with segments having this behavior being called \"tiles.\" In practice, this behavior only applies to markers as of writing.\nReference Positions\nReference positions are similar to having pointers to individual characters in a string. As the contents of the string change, and the integer position of the character shifts around, the reference position will always point to the same character.\nIf that character is deleted, certain kinds of reference positions can slide to the next closest candidate character.\nReference positions are used to implement intervals, with the start and end positions of an interval being reference positions.\nThere is quite a bit of existing writing about reference positions, so I will not talk too much about the different reference types or the core algorithms here.\nLocal Reference Positions\nThe concept of a reference position is an abstract interface that could in theory be implemented by a number of different structures to achieve myriad functionality.\nIn practice, there is only one kind of reference position2: a local reference position. Local reference positions are not sent across the wire and there is no op for creating one. They are purely local to the current client and are not persisted at any point.\n\"Local reference position\" and \"reference position\" are today used interchangeably. The document linked in the section above discusses the behavior of local reference positions in more depth.\nFor use in intervals, the interval collection manages sending the position of local references to other clients and recreating such references locally when changes are received from other clients.\nOrdinals\nSometimes it's useful to be able to compare two segments and quickly determine the ordering of their position in the tree. For example, if you have a list of random segments and want to quickly sort them by their position in the tree.\nThe merge-tree attaches an \"ordinal\" to each segment. This is a unique string that is used in the ordering of segments. Ordinals can be thought of as arrays of bytes, though in practice we represent them as strings because comparison of arrays is hard in JavaScript.\nAt each level of the tree we add a new byte to the array. Within a given level, the last byte increases as we move along the tree.\nFor example:\n     \"0\"\n  /       \\\n\"00\"      \"01\"\n       /   |   \\\n   \"010\" \"011\" \"012\"\n\nIt's a bit annoying to get the ASCII diagram to look nice, but this should give a basic idea. Here, the nodes are what the ordinals would be at each segment. Then to compare if segment A comes in the string before segment B, we just have to compare A.ordinal &lt; B.ordinal.\n\n\nSummarization\nSummarization is the process by which the merge-tree is serialized so that it can be loaded later. \nA lot of the summarization process can be considered an implementation detail best understood by reading the code, but I do wish to touch on a few interesting bits that aren't documented anywhere else, are useful to know, and are likely to remain true for some time.\nToday the merge-tree supports two summarization formats: legacy and v1. The difference between the two is largely in the way operations that live inside the collab window are persisted.\nThe \"legacy\" format persists these ops literally and on load re-applies them. The v1 format eagerly applies these ops and persists the tree with them applied.\nIn the legacy format, the merge-tree will collect all the operations that occurred in the collab window (i.e. above the minSeq) and store them separately in an array called \"catch up ops\". All changes to segments that occurred past the minSeq are not persisted in this format. On load, these catch up ops are re-applied to the tree to get to the state at summarization.\nIn the v1 format, there is no such concept, and all segments are serialized exactly as they are in the tree at the point of summarization.\nThe SharedString data structure makes use of the \"legacy\" format, while the SharedMatrix data structure makes use of the v1 format.\nThere isn't a large reason to prefer one format over the other, and the distinction is largely for legacy reasons. Although one format is called \"legacy,\" both formats are in active use and are supported -- the \"legacy\" name is a bit of a misnomer.\nAside: What is a B-tree?\nB-trees and B+trees are admittedly more-niche data structures, so I think it may be helpful to quickly describe what they are. That the merge-tree is a B+tree is very much an implementation detail, and so it is not critical to understand these algorithms, but it may make some of the inner workings more clear.\nYou are likely already familiar with a BST or binary search tree. This is a tree data structure in which at each node values lesser than that node can be found by taking the left branch and values greater than the node can be found to the right.\nA B-tree is exactly this data structure, except at each node instead of a single value, it contains a sorted array of values. This reduces the height of the tree, the number of unique allocations required, and improves the cache coherence of search and lookup.\nA B+tree is a B-tree that does not store values in non-leaf nodes. So in a B+tree, all the elements in non-leaf nodes are pointers to other nodes. In a B-tree, the pointers to other nodes and values may be mixed in the node.\nSo merge-tree is a binary search tree where at each node there is either an array of pointers to child nodes, or in the case of leaf nodes there is an array of segments, as we described above.\nReview and Glossary\nThe below is a quick summary of the vocabulary terms which are discussed in more detail above.\nsequence number: a strictly increasing integer assigned uniquely to all operations in the order they're processed by the server\nrefSeq: the last sequence number from the server a particular client processed\nminSeq: the lowest reference sequence number (refSeq) of all clients viewing a document\ncurrent seq: the highest (most recent) sequence number processed by the server\ncollab window: all ops and sequence numbers between the minSeq and the current seq\nlocalSeq: a strictly increasing integer assigned uniquely to all local operations in the order they are created. is not sent over the wire or persisted anywhere\nunassigned sequence number: the placeholder/sentinel sequence number used for local edits when they have not been acked by the server, and so lack a proper sequence number\nordinal: a string of bytes used to quickly determine relative ordering of two or more segments\nreference position: a pointer to an individual character in the string. slides to other characters if the character it points to is removed\npartial lengths: a segment tree-like optimization for quickly computing the length of nodes/segments in the merge-tree\nzamboni: merge-tree's garbage collection algorithm\nmarker: special-cased 1-length segment that has no content itself and supports efficiently finding other markers\ntile: any segment having the spatially accelerated behavior of markers\nacked: an operation which has been sent to the server and given a sequence number\nunacked: an operation which has not yet been given a sequence number by the server\nclient sequence number: a per-client sequence number used by the server to ensure data integrity and that all ops are processed in order. unused by merge-tree\n\n1\nTechnically sequence numbers of two ops can be the same in the case of grouped batching and grouped ops in general, but I think it's helpful to ignore these cases when discussing the core algorithms.\n\n2\nMarkers technically also implement the ReferencePosition interface, but this is largely legacy cruft and this functionality is not widely used today by merge-tree or its consumers.\n\n\n","id":"https://connorskees.github.io/blog/merge-tree/","title":"Merge-Tree — A Data Structure for Real-Time Collaborative Text Editing"},"https://connorskees.github.io/blog/miniz-optimization/":{"body":"\nI'm working on a large blog post investigating the performance characteristics of various PNG decoders across several programming languages. A large part of this work is profiling and benchmarking them.\nThe first decoder I've been looking at as part of this work is image-rs/png, which is the most downloaded PNG decoder in the rust ecosystem.\n\nTo start this kind of work, I like getting some cursory profiles and benchmarks just to see what the libraries are doing. The image I like to start with is this PNG of the periodic table of elements from Wikimedia Commons. This file is in the public domain, so we can do whatever we want with it and it's a pretty good size at ~2.2mb.\nTo benchmark image-rs/png, I have to create a binary that uses it, since by itself it's just a library. I've created a simple rust program that looks like this:\nfn main() {\n    const BYTES: &amp;[u8] = include_bytes!(\"Periodic_table_large.png\");\n\n    let decoder = png::Decoder::new(BYTES);\n    let mut reader = decoder.read_info().unwrap();\n\n    let bpp = reader.info().bytes_per_pixel();\n    let width = reader.info().width;\n    let length = reader.info().raw_row_length();\n\n    let mut buffer = vec![0; bpp * width as usize * length as usize];\n\n    while let Some(row) = reader.next_row().unwrap() {\n        buffer.extend_from_slice(row.data());\n    }\n\n    std::hint::black_box(buffer);\n}\n\nThis isn't perfect, but it works for my purposes right now. A more robust solution would elide the command line altogether and only benchmark the PNG operations themselves, but at the start I just want a rough idea of how the library performs.\nI've made a few optimizations to improve the benchmark. Namely, I avoid file IO by using rust's include_bytes! macro, which will load the entire contents of a file into the binary at compile time instead of at runtime, and I pre-allocate the entire output buffer in order to avoid having to resize it during the benchmark.\nI'm using std::hint::black_box to make sure the compiler doesn't optimize anything differently just because we aren't actually using the result of the decoding.\nTo run this benchmark I'm going to use hyperfine, which is a great tool for ad hoc benchmarking of command line utilities.\ncargo b --release\nhyperfine ./target/release/test-png\n\ngives us\nBenchmark 1: ./target/release/test-image-png\n  Time (mean ± σ):     253.5 ms ±   3.3 ms    [User: 211.7 ms, System: 39.9 ms]\n  Range (min … max):   250.6 ms … 262.4 ms    11 runs\n\nSo about 250ms to decode a 2mb image. Is that reasonable? We don't really know -- this is the first decoder we're looking at. Intuitively it feels a bit slow. This is executing on a dedicated Linux server that's not running any other programs. \nOut of curiosity, let's profile the binary using perf to see where it's spending its time.\nperf record -e cpu-clock ./target/release/test-png\n\nprints\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.047 MB perf.data (1017 samples) ]\n\nand creates a perf.data file. We can read this file using perf report. \nperf report\n\nThis opens an interactive viewer in our terminal that looks something like this:\n\nReading this output isn't too complex. The first column displays a percentage of execution spent in the function. The last column shows the symbol name, which is either the actual name of a function or a memory address. \nDoes this profile make sense? \nThe second line looks like it belongs. We'd expect decoding the next interlaced row to be the bulk of the time in a benchmark where we loop over the rows of a PNG file. image-rs/png uses #![forbid(unsafe)], which means that unless they're using an external crate, they likely don't use handwritten SIMD intrinsics to decode PNG filters. LLVM can do ok autovectorizing sometimes, but in general one would expect the equivalent higher level code to not be as fast. It makes sense that this might be a bit slow.\nSo we expect that most of the time would be spent in png::decoder::Reader&lt;R&gt;::next_raw_interlaced_row, but what about miniz_oxide::inflate::core::transfer?\nFrom the name it's clear that this is coming from the DEFLATE library that image-rs/png relies on. It sounds like all it's doing is transferring data from one buffer to another. If we look at the implementation in miniz_oxide, we can see that's exactly what it's doing:\n#[inline]\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    for _ in 0..match_len &gt;&gt; 2 {\n        out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n        out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n        source_pos += 4;\n        out_pos += 4;\n    }\n\n    match match_len &amp; 3 {\n        0 =&gt; (),\n        1 =&gt; out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask],\n        2 =&gt; {\n            out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n            out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        }\n        3 =&gt; {\n            out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n            out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n            out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        }\n        _ =&gt; unreachable!(),\n    }\n}\n\nGiven a buffer, out_slice, this function will read bytes from within out_slice starting at source_pos and copying them to out_slice starting at out_pos. The specific way it does the copying is a bit more complex, but that's the gist of it.\nOur PNG decoder spends 1/3rd of its time copying bytes. That raises a few red flags. Modern memcpy is pretty fast and shouldn't be a bottleneck for our decoder. This function probably isn't being optimized to a straight memcpy, but that's the upper bound we should be targeting, and I think we should be able to get pretty close. Let's look at the disassembly to see what's going wrong. When we look at the disassembly, let's ignore the bottom match statement. That's only executed once per function call and should have a much smaller impact on perf compared to the loop1.\nminiz_oxide::core::inflate::transfer:\n        push    rax\n        cmp     r8, 4\n        jb      .LBB0_11\n        ; match_len &gt;&gt; 2\n        shr     r8, 2\n.LBB0_2:\n        ; out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n        mov     rax, rdx\n        and     rax, r9\n        cmp     rax, rsi\n        jae     .LBB0_12\n        cmp     rcx, rsi\n        jae     .LBB0_14\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rdi + rcx], al\n\n        ; out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        inc     rdx\n        mov     rax, rdx\n        and     rax, r9\n        cmp     rax, rsi\n        jae     .LBB0_15\n        lea     r10, [rcx + 1]\n        cmp     r10, rsi\n        jae     .LBB0_16\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rdi + rcx + 1], al\n\n        ; out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        inc     rdx\n        mov     rax, rdx\n        and     rax, r9\n        cmp     rax, rsi\n        jae     .LBB0_18\n        lea     r10, [rcx + 2]\n        cmp     r10, rsi\n        jae     .LBB0_19\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rdi + rcx + 2], al\n\n        ; out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n        inc     rdx\n        mov     rax, rdx\n        and     rax, r9\n        cmp     rax, rsi\n        jae     .LBB0_20\n        lea     r10, [rcx + 3]\n        cmp     r10, rsi\n        jae     .LBB0_21\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rdi + rcx + 3], al\n\n        ; source_pos += 4;\n        add     rcx, 4\n        inc     rdx\n        dec     r8\n        jne     .LBB0_2\n.LBB0_11:\n        pop     rax\n        ret\n\n; ... several lines of panic handling code are omitted\n\nLet's break the disassembly down in chunks.\nWe see a block like this repeated 4 times.\nmov     rax, rdx\nand     rax, r9\ncmp     rax, rsi\njae     .LBB0_12\ncmp     rcx, rsi\njae     .LBB0_14\nmovzx   eax, byte ptr [rdi + rax]\nmov     byte ptr [rdi + rcx], al\n\nEach instance corresponds to the line out_slice[out_pos] = out_slice[(source_pos + X) &amp; out_buf_size_mask]; in the original source. Since we compiled this on Linux, we're using the System V ABI's calling conventions. We pass in out_slice as the first argument. In rust, slices are represented by a pointer and a length. These values get passed to our function in rdi and rsi respectively. The next parameter, in this case source_pos, is passed to the function in rdx. So we move the value of source_pos from the register rdx to the register rax. Then we bitmask it with r9, which contains the value of out_buf_size_mask.\nThen we compare that bitmasked value to the length of out_slice stored in the register rsi. The jae instruction, jump if above or equal, does exactly what it sounds like. If rax is greater than or equal to the length, then we jump to .LBB0_12, which sets us up to panic. This is an array bounds check. We have a similar check in the two instructions below, where we check that out_pos is also in the bounds of the slice. \nFollowing that, we move the value at out_slice[source_pos] into the register eax. Then we move the lower 8 bits of that register to out_slice[out_pos].\nWe repeat this 4 times until we get to the end of the loop.\nadd     rcx, 4\ninc     rdx\ndec     r8\njne     .LBB0_2\n\nThen we add 4 to out_pos. During iteration we've already been adding to source_pos, so here we just have to increment its value by 1. Then we subtract 1 from our loop counter and jump to the start of the loop if it isn't zero.\nYou might already be able to see a bit of inefficiency, even if you aren't that familiar with assembly. On every iteration we perform 2 bounds checks per line, for a total of 8 bounds checks per iteration. Bounds checks do add overhead, but much like integer overflow checks, they aren't by themselves that slow. In our case, going out of bounds is exceptional and should never happen during the course of regular execution, which means the branch predictor should do a really good job here.\nTypically the problem with integer overflow checks and bounds checks is that they prevent other optimizations, like autovectorization. Perhaps that's what's happening here -- we're doing a lot of bounds checks inside a tight loop and so LLVM can't optimize it that well. Let's see what removing the bounds checks does to the codegen.\nLet's start by trying to remove them in safe rust. We can try asserting one large length condition at the start of the function, and hope that LLVM is able to elide the later checks.\nThe new code looks something like this:\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    assert!(out_slice.len() &gt; (match_len &gt;&gt; 2) * 4 + out_pos - 1);\n    assert!(out_slice.len() &gt; (match_len &gt;&gt; 2) * 4 + source_pos - 1);\n    for _ in 0..match_len &gt;&gt; 2 {\n        out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n        out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n        source_pos += 4;\n        out_pos += 4;\n    }\n}\n\nRemember we're omitting the final match statement for simplicity. Let's look at the disassembly for the first line in our loop body now.\n; out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\nmov     rax, rdx\nand     rax, r9\ncmp     rax, rsi\njae     .LBB0_16\ncmp     rcx, rsi\njae     .LBB0_18\nmovzx   eax, byte ptr [rdi + rax]\nmov     byte ptr [rdi + rcx], al\n\nThe bounds checks are still there :/\nLLVM wasn't smart enough to elide them based on our assert at the start of the function. Admittedly the check was a bit complex. What if we try asserting at the start of the loop body? That should be a lot simpler for the compiler to reason about.\nOur new code looks like this\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    for _ in 0..match_len &gt;&gt; 2 {\n        assert!(out_slice.len() &gt; out_pos + 3);\n        assert!(out_slice.len() &gt; source_pos + 3);\n        out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n        out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n        source_pos += 4;\n        out_pos += 4;\n    }\n}\n\nLooking at the assembly,\n; out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\nlea     rax, [rdx + rbx]\nand     rax, r9\ncmp     rax, rsi\njae     .LBB0_12\nlea     r11, [rcx + rbx]\ncmp     r11, rsi\njae     .LBB0_14\nmovzx   eax, byte ptr [rdi + rax]\nmov     byte ptr [r14 + rbx - 3], al\n\nThe cmp and jae are still there twice for every line in the loop. At this point let's just give up and use unsafe to see if what we're trying to do will actually have a meaningful impact on the codegen. We can use slice::get_unchecked and slice::get_unchecked_mut to elide bounds checks that we know are safe.\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    assert!(out_slice.len() &gt; (match_len &gt;&gt; 2) * 4 + out_pos - 1);\n    assert!(out_slice.len() &gt; (match_len &gt;&gt; 2) * 4 + source_pos - 1);\n\n    for _ in 0..match_len &gt;&gt; 2 {\n        unsafe {\n            *out_slice.get_unchecked_mut(out_pos) =\n                *out_slice.get_unchecked(source_pos &amp; out_buf_size_mask);\n            *out_slice.get_unchecked_mut(out_pos + 1) =\n                *out_slice.get_unchecked((source_pos + 1) &amp; out_buf_size_mask);\n            *out_slice.get_unchecked_mut(out_pos + 2) =\n                *out_slice.get_unchecked((source_pos + 2) &amp; out_buf_size_mask);\n            *out_slice.get_unchecked_mut(out_pos + 3) =\n                *out_slice.get_unchecked((source_pos + 3) &amp; out_buf_size_mask);\n        }\n        source_pos += 4;\n        out_pos += 4;\n    }\n}\n\nWe'll add back our original asserts to make sure we don't accidentally do any out-of-bounds reads. What does the codegen for this look like?\nexample::transfer:\n        push    rax\n        mov     r10, r8\n        and     r10, -4\n        lea     rax, [r10 + rcx]\n        cmp     rax, rsi\n        jae     .LBB0_6\n        add     r10, rdx\n        cmp     r10, rsi\n        jae     .LBB0_7\n        cmp     r8, 4\n        jb      .LBB0_5\n        shr     r8, 2\n        cmp     r8, 2\n        mov     r10d, 1\n        cmovae  r10, r8\n        add     rcx, rdi\n        add     rcx, 3\n        xor     esi, esi\n.LBB0_4:\n        mov     rax, rdx\n        and     rax, r9\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rcx + 4*rsi - 3], al\n        lea     rax, [rdx + 1]\n        and     rax, r9\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rcx + 4*rsi - 2], al\n        lea     rax, [rdx + 2]\n        and     rax, r9\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rcx + 4*rsi - 1], al\n        lea     rax, [rdx + 3]\n        and     rax, r9\n        movzx   eax, byte ptr [rdi + rax]\n        mov     byte ptr [rcx + 4*rsi], al\n        lea     rax, [rsi + 1]\n        add     rdx, 4\n        mov     rsi, rax\n        cmp     r10, rax\n        jne     .LBB0_4\n.LBB0_5:\n        pop     rax\n        ret\n.LBB0_6:\n        lea     rdi, [rip + .L__unnamed_1]\n        lea     rdx, [rip + .L__unnamed_2]\n        mov     esi, 66\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\n        ud2\n.LBB0_7:\n        lea     rdi, [rip + .L__unnamed_3]\n        lea     rdx, [rip + .L__unnamed_4]\n        mov     esi, 69\n        call    qword ptr [rip + core::panicking::panic@GOTPCREL]\n        ud2\n\nNo bounds checks! And a lot fewer instructions than what we started with (55 lines vs 82 originally). So how much faster is the code without bounds checks?\nLet's start by cloning the miniz_oxide repo and vendoring our dependencies so we can modify them locally. \nIf our original Cargo.toml looked like this,\n[dependencies]\npng = \"0.17.7\"\n\nwe just have to add this section\n[patch.crates-io]\nminiz_oxide = { path = \"../miniz_oxide/miniz_oxide\" }\n\nBefore we start making changes, lets make a copy of the original binary we used to benchmark so we can use it as a point of comparison for our changes. \ncp ./target/release/test-png ./original\n\nNext let's replace the old implementation of transfer with our new one. Then we can build and compare the two implementations.\ncargo b --release\nhyperfine ./original ./target/release/test-png --warmup 5\n\nwhich prints\nBenchmark 1: ./original\n  Time (mean ± σ):     255.9 ms ±   4.5 ms    [User: 216.9 ms, System: 35.5 ms]\n  Range (min … max):   251.7 ms … 265.2 ms    11 runs\n \nBenchmark 2: ./target/release/test-image-png\n  Time (mean ± σ):     254.5 ms ±   5.0 ms    [User: 214.7 ms, System: 38.4 ms]\n  Range (min … max):   250.2 ms … 267.3 ms    11 runs\n \nSummary\n  './target/release/test-image-png' ran\n    1.01 ± 0.03 times faster than './original'\n\nA 1% improvement. These results are barely above random noise, even though we removed bounds checks. We're doing a bit of new work now for the 2 assertions at the start of the function, but that wouldn't be the cause for such a small speed-up. Fundamentally the performance benefits from removing bounds checks aren't helping us here and the optimizer isn't able to do much better even with them gone. If we want to speed up this function, we have to start thinking about the algorithm.\nLooking at the assembly, right now our implementation is entirely scalar. We load one array element at a time, mask it, and then copy it to the out position. It should be trivial for the compiler to vectorize this, so what's preventing it?\nThere's two problems here. First, we mask the array indices with out_buf_size_mask, which means its possible for us to be forced to copy non-consecutive elements from the array. Non-consecutive reads may prevent us from using SIMD here at all.\nThe other issue is that our data is highly dependent on previous calculations. This is especially apparent when source_pos and out_pos differ by less than 4. We can see this if we think through an example where our array is [1, 2, 3, 4, 5, 6, 7, 8], source_pos is 0, and out_pos is 2. We can pretend we don't do any masking for now. Here's what the code looks like if we substitute concrete values for source_pos and out_pos:\nout_slice = [1, 2, 3, 4, 5, 6, 7, 8]\n\nout_slice[2] = out_slice[0]\nout_slice[3] = out_slice[1]\n\n# !!!\nout_slice[4] = out_slice[2]\nout_slice[5] = out_slice[3]\n\nAfter the first iteration, the array is now [1, 2, 1, 2, 1, 2, 7, 8].\nOn the third line of our loop, we depend on the results of the first line of our loop. if we tried to load all the values for this iteration at once, we wouldn't get the correct result. We'll have to be really creative if we end up having to work around this dependency in the general case2.\nLet's look at the first problem -- masking can cause non-consecutive reads. Is there any way around this? One thing we could look at is the value we're masking by. If it's always the same value, we might be able to make some interesting optimizations. To inspect its value, we can use an ad hoc profiling tool called counts that I really love. To use it, we just need to insert some prints into the code and then pipe the results to counts.\nOur new code looks like this:\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    println!(\"{}\", out_buf_size_mask);\n    for _ in 0..match_len &gt;&gt; 2 {\n        out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n        out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n        out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n        out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n        source_pos += 4;\n        out_pos += 4;\n    }\n}\n\nPretty simple. Then to use it:\ncargo r --release | counts\n\nWe run in release mode just because it's prohibitively slow to execute in debug mode. After running this, we get our results:\n255047 counts\n(  1)   255047 (100.0%,100.0%): 18446744073709551615\n\nLooking at the output, the first number in parentheses is just the line number of the output. The second number is the count for the given value. The last number in the output is the value that we printed.\nBased on this, we can see that the mask value is always the same. It looks like some large 64 bit integer. I don't have special 64 bit integers memorized, so lets open up a python repl to see what it looks like in binary.\n&gt;&gt;&gt; bin(18446744073709551615)\n'0b1111111111111111111111111111111111111111111111111111111111111111'\n\nThe number is all ones. Let's check how long it is. The number we're hoping for is 64:\n&gt;&gt;&gt; len(_) - 2\n64\n\nOk, so in every case that we call this function for this input, we don't actually do any masking. That's our first problem solved. We can just special case our code when out_buf_size_mask === usize::MAX.\nOur next issue is the data dependency when the difference between out_pos and source_pos is small enough that they overlap. Let's see how often this comes up in practice. We can use counts here again to help us:\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    println!(\"{}\", source_pos.abs_diff(out_pos));\n    \n    // ...\n}\n\ncargo r --release | counts\n\ngives us\n255047 counts\n(  1)   253652 (99.5%, 99.5%): 1\n(  2)      516 ( 0.2%, 99.7%): 4\n(  3)      150 ( 0.1%, 99.7%): 1200\n(  4)       46 ( 0.0%, 99.7%): 24001\n(  5)       24 ( 0.0%, 99.7%): 2400\n(  6)       16 ( 0.0%, 99.7%): 8\n(  7)       12 ( 0.0%, 99.8%): 281\n(  8)       12 ( 0.0%, 99.8%): 285\n(  9)       11 ( 0.0%, 99.8%): 120\n( 10)       10 ( 0.0%, 99.8%): 265\n( 11)       10 ( 0.0%, 99.8%): 3600\n( 12)       10 ( 0.0%, 99.8%): 4800\n( 13)        8 ( 0.0%, 99.8%): 273\n( 14)        8 ( 0.0%, 99.8%): 277\n( 15)        8 ( 0.0%, 99.8%): 305\n... 215 more results omitted\n\nQuite a bit of variance. But if we look at the percentages, 99.5% of cases have a difference of 1. The rest of the cases all have pretty low counts relative to the total. So now we know which case we want to investigate.\nRight now we're checking the absolute difference, so we're not actually checking whether out_pos is greater than or less than source_pos. This can affect the changes that we're making, so let's see which one is more common.\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    println!(\"{:?}\", source_pos.cmp(&amp;out_pos));\n    \n    // ...\n}\n\ncargo r --release | counts\n\n255047 counts\n(  1)   255047 (100.0%,100.0%): Less\n\nsource_pos is always less than out_pos. That means we can just ignore all other cases. That's pretty helpful for our optimization work. Now we can start trying to come up with a fast path:\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    if out_buf_size_mask == usize::MAX &amp;&amp; source_pos.abs_diff(out_pos) == 1 {\n        // our super-fast specialized code goes here\n    } else {\n        for _ in 0..match_len &gt;&gt; 2 {\n            out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n            out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n            out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n            out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n            source_pos += 4;\n            out_pos += 4;\n        }\n    }\n}\n\nLet's revisit our example from before. If we start with an array of [1, 2, 3, 4, 5, 6, 7, 8], let's say source_pos is 0, and out_pos is 1 this time. We don't have to worry about masking because we know the number we're masking by is usize::MAX. Let's think through what the array looks like after 1 iteration.\nout_slice = [1, 2, 3, 4, 5, 6, 7, 8]\n\n# [1, 2, 3, 4, 5, 6, 7, 8]\nout_slice[1] = out_slice[0]\n# [1, 1, 3, 4, 5, 6, 7, 8]\nout_slice[2] = out_slice[1]\n# [1, 1, 1, 4, 5, 6, 7, 8]\nout_slice[2] = out_slice[2]\n# [1, 1, 1, 1, 5, 6, 7, 8]\nout_slice[4] = out_slice[3]\n\nThere's a pretty clear -- and exciting -- pattern here. The range is just converted to be the same value. So if we calculate the end position, we can pretty succinctly do memset(&amp;out_slice[out_pos], out_slice[source_pos], end - out_pos). In rust we can get this codegen pretty easily with out_slice[out_pos..end].fill(out_slice[source_pos]). To calculate the end, we can reuse some of our assertion code from before. \nOur new code is\nfn transfer(\n    out_slice: &amp;mut [u8],\n    mut source_pos: usize,\n    mut out_pos: usize,\n    match_len: usize,\n    out_buf_size_mask: usize,\n) {\n    if out_buf_size_mask == usize::MAX &amp;&amp; source_pos.abs_diff(out_pos) == 1 {\n        let fill_byte = out_slice[source_pos];\n        let end = (match_len &gt;&gt; 2) * 4 + out_pos;\n        out_slice[out_pos..end].fill(fill_byte);\n        source_pos = end - 1;\n        out_pos = end;\n    } else {\n        for _ in 0..match_len &gt;&gt; 2 {\n            out_slice[out_pos] = out_slice[source_pos &amp; out_buf_size_mask];\n            out_slice[out_pos + 1] = out_slice[(source_pos + 1) &amp; out_buf_size_mask];\n            out_slice[out_pos + 2] = out_slice[(source_pos + 2) &amp; out_buf_size_mask];\n            out_slice[out_pos + 3] = out_slice[(source_pos + 3) &amp; out_buf_size_mask];\n            source_pos += 4;\n            out_pos += 4;\n        }\n    }\n}\n\nWe can't compute the fill_byte as an argument to .fill(..) because of rust's borrow checker, so we have to bring out as a separate variable. We have to update the source_pos and out_pos in our fast path because the later match statement depends on their values.\nNow let's compile this and compare it to our original binary.\ncargo b --release\nhyperfine ./original ./target/release/test-png --warmup 5\n\nBenchmark 1: ./original\n  Time (mean ± σ):     253.1 ms ±   3.1 ms    [User: 207.9 ms, System: 43.4 ms]\n  Range (min … max):   250.5 ms … 260.7 ms    11 runs\n \nBenchmark 2: ./target/release/test-image-png\n  Time (mean ± σ):     164.8 ms ±   1.3 ms    [User: 129.9 ms, System: 34.0 ms]\n  Range (min … max):   163.7 ms … 168.1 ms    17 runs\n \nSummary\n  './target/release/test-image-png' ran\n    1.54 ± 0.02 times faster than './original'\n\nA 50% improvement. This benchmark is testing how long it takes to decode an entire PNG, so this would be a pretty meaningful optimization. Let's double check this is real and that we didn't break anything by running miniz_oxide's test suite.\ncd ../miniz_oxide\ncargo t --all\n\ntest result: ok. 22 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s\n\n# ... full test results omitted\n\nAll of the tests pass; this is likely a sound optimization. At this point we should be comfortable making a PR with our changes. \nThis patch was submitted as #131 to the miniz_oxide repo. It contains a bit more than described here. miniz_oxide has its own benchmark suite, and after looking at it we can make a few small changes to improve performance there as well. \nThe results of our optimization are pretty striking: for some inputs we see a more than 2x improvement. miniz_oxide is ported from a C library that has roughly the same performance characteristics. What this means is, after our changes, miniz_oxide is now also more than 2x faster than the original C implementation for these inputs.\nThe relevant benchmarks are:\n// before\ntest oxide::decompress_compressed_lvl_1 ... bench:      89,253 ns/iter (+/- 1,412)\ntest oxide::decompress_compressed_lvl_6 ... bench:     176,299 ns/iter (+/- 6,266)\ntest oxide::decompress_compressed_lvl_9 ... bench:     175,840 ns/iter (+/- 3,131)\n\n// after\ntest oxide::decompress_compressed_lvl_1 ... bench:      83,992 ns/iter (+/- 1,347)\ntest oxide::decompress_compressed_lvl_6 ... bench:      76,640 ns/iter (+/- 2,288)\ntest oxide::decompress_compressed_lvl_9 ... bench:      76,791 ns/iter (+/- 1,978)\n\n1\nIn practice this was verified by looking at the annotated disassembly in perf report\n\n2\nAn implementation of this problem in the general case can be found here, though it ends up not being much faster\n\n\n\n\n\n\n","id":"https://connorskees.github.io/blog/miniz-optimization/","title":"Optimizing Low Hanging Fruit in `miniz_oxide`"},"https://connorskees.github.io/blog/permutation-polynomials/":{"body":"A permutation polynomial is any polynomial which acts as a permutation of a given set of numbers. In other terms, the polynomial defines a bijection from x to f(x), or a 1:1 mapping of unique inputs to unique outputs and also that each x value in the input domain appears in the output range.\nGenerally these polynomials operate on a finite range of numbers, most of them having their input modulo some n.\nThe simplest such polynomial is $$f(x) = x$$, because every unique input is mapped to a unique output -- for example, 1 goes to 1, 2 goes to 2, 3 goes to 3, and so on. A slightly more complex example is $$f(x) = 3x$$ for the integers mod 4. In this case, we have the property that:\n$$\nf(0) = 0\n$$\n\n$$\nf(1) = 3\n$$\n\n$$\nf(2) = 2\n$$\n\n$$\nf(3) = 1\n$$\nThis gives us [0, 1, 2, 3] =&gt; [0, 3, 2, 1] or a permutation of the set of integers mod 4.\nThe rest of this post will be about binary permutation polynomials, or those that are evaluated modulo a power of two. These polynomials have certain properties that make them easier to work with, and are what one would most commonly find in the wild, as the bit-widths of integers in most programming languages are powers of two.\nTesting\nDetermining whether an arbitrary polynomial is a permutation polynomial has not been shown to be possible using an algorithm that executes in polynomial time. This can make it computationally expensive to determine whether arbitrary polynomials of high degree are permutation polynomials.\nPolynomials that are modulo a power of two, however, are much easier to reason about and determining whether a given binary polynomial is a permutation polynomial is possible in linear time. A polynomial modulo a power of two is a permutation polynomial if and only if:\n\nthe 1-degree monomial (i.e. $$x$$) has an odd coefficient\nthe sum of the coefficients of all even degree monomials excluding 0 (e.g. $$x^2$$, $$x^4$$, $$x^6$$, ...) is even\nthe sum of the coefficients of all odd degree monomials excluding 1 (e.g. $$x^3$$, $$x^5$$, $$x^7$$, ...) is even\n\nExamples of valid permutation polynomials modulo a power of 2:\n$$\n24x^2 + 13x + 15\n$$\n\n$$\n13x^4 + 72x^3 + 9x^2 + 85x + 32\n$$\n\n$$\n248x^2 + 97x\n$$\nExamples of invalid permutation polynomials modulo a power of 2:\n$$\n9x^2 + x\n$$\n\n$$\n10x^4 + 3x^2\n$$\n\n$$\n19x^4 + 13x^3 + 13x^2 + 13x\n$$\nMore reading about this property can be found in this paper.\nInversion\nFinding the inverse of a permutation polynomial is useful for some problems. Given a permutation polynomial, $$P$$, and its inverse, $$Q$$, these two polynomials have the property that $$P(Q(x)) = x$$ and $$Q(P(x)) = x$$.\nThe first paper to demonstrate a method for inverting arbitrary binary permutation polynomials, is Barthelemy et al. in 2016. In it, they use an iterative Newtonian method to converge on a valid inverse using the formula:\n$$\ng_{i+1} = g_i - g_i' \\times (f \\circ (g_i - X))\n$$\nWhere $$f(x)$$ is the original polynomial, and $$g(x)$$ is its inverse. This formula is to be iteratively applied until the inverse has been found.\nIn 2018 Barthelemy released a second paper describing two additional algorithms for finding the inverse of a permutation polynomial, this time using Lagrange interpolation. I am less familiar with these algorithms, and as far as I am aware, they are not strictly better than the above Newtonian approach.\nAs the first paper describes, inversion has useful properties in the field of obfuscation where a formula such as $$P(E + Q(K))$$ is used to obfuscate constants, where $$K$$ is a constant, $$P$$ is a permutation polynomial, $$Q$$ is its inverse, and $$E$$ is an arbitrarily complex expression that evaluates to 0.\n\n","id":"https://connorskees.github.io/blog/permutation-polynomials/","title":"Permutation Polynomials"},"https://connorskees.github.io/blog/python-leetcode/":{"body":"After many technical interviews in a lot of different programming languages, I've decided that python is the best language for interviewing, and I would even go so far as to say that it's worth learning python even if only for interviewing.\nPython is a lingua franca almost on the same tier as JavaScript, but has a much more robust standard library and set of syntactic sugar that makes it far easier to use when solving leetcode/interview problems. Some solutions can be a bit \"magic,\" but in general are more readily understood by interviewers and lend themselves to being elegant and reading pretty close to English.\nBelow are some assorted tips to make python leetcode solutions nicer.\nLooping\nAvoid range(len(arr))\nPython uses exclusively for .. in loops, rather than the traditional C-style for (int i = 0; i &lt; arr.length; i++) loops. If you have a loop that looks like\nfor i in range(len(arr)):\n    elem = arr[i]\n    print(elem)\n\nyou should replace it with for elem in arr.\nIf you do need the index, use enumerate(..)\nenumerate takes a list and returns an iterator of tuples containing the elements alongside their indices. For example,\nfor idx, elem in enumerate(arr):\n    print(elem)\n\nRemember the index is always the first element in the tuple. enumerate avoids ugly range(len(..)) calls, and is useful in things like list comprehensions, which we'll discuss below.\nIterate in reverse using reversed(..)\nIn a similar vein, you shouldn't use index-based loops to iterate in reverse. Sometimes people try to do for i in range(len(arr) - 1, -1, -1). This is pretty ugly and annoying to type. Instead you should do\nfor elem in reversed(arr):\n    print(elem)\n\nComprehensions\nPython has syntactic sugar for filter and map in the form of \"list comprehensions.\" Most people writing python are familiar with comprehensions, but there are some interesting applications that some may not know about.\nUse list comprehensions instead of map(..)\nA simple example might be to add 1 to every element in arr.\narr = [elem + 1 for elem in arr]\n\nList comprehensions make mappings over arrays easy to read and write.\nUse list comprehensions instead of filter(..)\nList comprehensions also support filtering with the if keyword at the end. A simple example to keep only the even numbers in arr:\narr = [elem for elem in arr if elem % 2 == 0]\n\nFiltering and mapping can be combined to create arbitrarily complex expressions, though generally if your comprehension starts spanning over multiple lines, it might be good to split it up into multiple operations.\nSet and dict comprehensions\nComprehensions are not limited to constructing arrays. It's also possible to use them to easily create sets and dicts from existing collections.\nFor dictionary comprehensions, here's how you might create a dictionary which maps from an element to its index.\nelem_to_idx = { elem: idx for idx, elem in enumerate(arr) }\n\nSet comprehensions work in much the same way. Here's how you would create a set of just the even numbers in an array:\nunique_even_elems = { elem for elem in arr if elem % 2 == 0 }\n\nYou can also create generators from comprehensions\nThough, generator comprehensions are less useful in leetcode problems.\nGenerators are lazy and will only yield elements when they're asked for explicitly using functions like list(..) or next(..). This tends not to matter too much in interviews, but can be useful to 1. save characters when typing and 2. show off your knowledge of python and performance.\nA generator expression uses parens instead of square brackets.\nelems_generator = (elem for elem in arr)\n\nBut the parens aren't necessary in contexts where they're already implied, for example as the only argument to a function. This can save typing a few characters for common stuff like .join\nout = '-'.join(elem for elem in arr if elem % 2 == 0)\n\nFlattening arrays with nested comprehensions\nFlattening in python can actually be pretty annoying. The best way to do this is generally with a nested comprehension. In general the syntax of nested comprehensions can be confusing and easy to typo, so it's preferable to avoid them. But in the case of flattening it's not so bad. A single level flattening would look like:\nflat = [elem for arr in nested_arr for elem in arr]\n\nRepeating\nRepeat strings with multiplication\nTo repeat the characters of a string n times in python, you just multiply the string by n. In other languages this is a bit more explicit with methods like .repeat(..).\n\"a\" * 5 =&gt; \"aaaaa\"\n\nRepeat list contents with multiplication\nLists have a similar behavior, and can be multiplied to duplicate the contents.\n[\"a\"] * 5 =&gt; [\"a\", \"a\", \"a\", \"a\", \"a\"]\n\nUse caution when multiplying lists which contain objects. List multiplication does not copy the objects they contain. This means that something like [[]] * 5 will not create 5 new lists, but rather create 5 new pointers pointing to the same underlying object. This is more clear with an example:\narr = [[]] * 5 # [[], [], [], [], []]\narr[0].append(\"a\")\n# arr is now [['a'], ['a'], ['a'], ['a'], ['a']]\n\nThis behavior only matters for mutable objects, so most commonly lists and dicts. Immutable types like integers, strings, and tuples don't run into this issue, since they can't be modified in place.\nThe workaround for this behavior is to use a list comprehension,\narr = [[] for _ in range(5)]\n\nThis can come up frequently in 2d array problems where you want to initialize a starting grid with each cell having a value like 0.\ngrid = [[0] * width for _ in range(height)]\n\nIndexing\nSlice ranges from lists and strings\nThis is another pretty basic python feature. You can slice the start and ends of lists and strings using the syntax [start:end:step]. All elements are optional. If not specified the values are 0, len(arr), and 1 (meaning no step/a contiguous range)\ns = \"12345\"\ns[1:3]  # \"23\"\ns[:3]   # \"123\"\ns[1:]   # \"2345\"\ns[::2]  # \"135\"\ns[1::2] # \"24\"\n\nNegative indices for indexing the end\nPython lists start at 0 and end at -1. This means in our string s of \"12345\", s[0] is 1 and s[-1] is 5. The negative indices count backwards from there, so s[-2] is 4 and so on.\nThis can make certain algorithms really elegant, though you have to watch out for subtle integer underflow bugs, which in other languages would throw an error for being out of bounds.\nNegative indices in slicing\nYou can use negative indices combined with slicing to easily handle behavior at the end of the string.\ns = \"12345\"\ns[-1]  # \"5\"\ns[:-1] # \"1234\"\ns[-1:] # \"5\"\ns[-2:] # \"45\"\n\nYou can also use negative slicing to iterate in reverse. s[::-1] will actually reverse the string to make it \"54321\".\nReplacing content by slicing\nSlicing in python generally creates a new array which is not related to the old one. For example,\na = [1, 2, 3]\nb = a[:]\nb[0] = 5\n# a =&gt; [1, 2, 3]\n# b =&gt; [5, 2, 3]\n\nHowever, if you slice as part of the left hand side of an assignment, you can replace that slice with a new iterable. A pretty powerful aspect of this functionality is that the iterable being used to replace part of the original array doesn't need to be of the same length.\nHere's an example of how you might reverse only the inner part of an array\narr = [1, 2, 3, 4, 5]\narr[1:-1] = reversed(arr[1:-1])\n# arr =&gt; [1, 4, 3, 2, 5]\n\nOr deleting only the inner elements,\narr = [1, 2, 3, 4, 5]\narr[1:-1] = []\n# arr =&gt; [1, 5]\n\nSorting\nSorting with sorted(..)\nSorting in python is super simple, just call sorted(..) on the collection and it will return a list with the elements sorted.\nSorting by key\nYou can sort collections with a \"key function\" using the key parameter to sorted(..). The key function just maps each element to a different value which is actually used for comparison. For example, here's how you could use the key function to sort the array such that all of the even numbers are at the start:\narr = [1, 2, 3, 4]\nsorted(arr, key=lambda elem: elem % 2) # [2, 4, 1, 3]\n\nI also want to give a special shoutout to sorting by len, sorted(arr, key=len), or by other properties which python already has builtin functions for looking up.\nSorting in reverse\nsorted(..) also takes a reverse parameter, which can invert the sort. sorted(arr, reverse=True). This can be combined with a key function. Keep in mind this parameter has a different name from the builtin function\nSorting with a custom comparison function\nPlease don't sort using a custom comparison function. A custom comparison function is where you define a function that takes in two values and returns -1, 0, or 1 depending on which value is greater. These are generally easy to typo and much more complex than sorting with a key. There is effectively no leetcode question where it would be better to sort this way than with a key.\nIn some special cases where you really do need a comparison function, you can use functools.cmp_to_key function to convert the comparison function to a key function.\nMin and max\nPython has global functions min and max which can be used to do exactly what it sounds like. If passed a single iterable as an argument they will find the minimum/maximum element in that collection, and if passed multiple arguments they will find the min/max value among those arguments. If you want to find the min/max value among the elements of several lists, you'll want to spread those lists as arguments, which is discussed more below.\nmin and max also accept a key= argument, which behaves in the same way that it does for sorted.\nUnpacking and Spreading\nIterator unpacking\nPython supports list unpacking. This is also called destructuring in other languages like JavaScript. This allows you to remove repeated array lookups like first = arr[0], second = arr[1], etc. It actually works with all iterators, including things like tuples, sets, and generators. However, most commonly you will see this with arrays and tuples.\nfirst, second, third = [1, 2, 3]\n\nThis will crash if the iterator isn't exactly 3 elements in size. If your array is more than 3 elements and you just want to slice off the first few elements, you can also have a *arg.\nfirst, second, *rest = [1, 2, 3, 4, 5]\n# first = 1\n# second = 2\n# rest = [3, 4, 5]\n\nVariable swapping with unpacking\nUnpacking can also be used to swap variables without a temporary variable.\nBad:\ntmp = a\na = b\nb = tmp\n\nGood:\na, b = b, a\n\nYou can also use this for the pretty common pattern in some leetcode questions of having two variables, a and b, and needing to set a to b and b to a new value.\ndef fib(n: int) -&gt; int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\nThis is a pretty simple way to implement computing the nth fibonacci number.\nSpreading\nPython supports first class syntax for spreading iterators into function arguments and other collections. This can also be useful for flattening lists.\na = [1]\n[*a, *[2]] # [1, 2]\n\nThis also works for function arguments, for example min\nmin([4, 1], [3]) # [3]\nmin(*[4, 1], *[3]) # 1\n\nCollections\nPython's standard library of collections is one of the main reasons I like it so much for interviews\nCollection construction using set(..), list(..), dict(..)\nThis is a bit basic, but I sometimes see solutions which manually .append(..) or .add(..) inside of a loop to convert from a list to a set or vice-versa. Converting collections in python is really simple,\nBad:\narr = [1, 2, 1]\nunique = set()\n\nfor elem in arr:\n    unique.add(elem)\n\nGood:\narr = [1, 2, 1]\nunique = set(arr)\n\nDicts can be created in this way, as long as the elements are lists/tuples/other iterators containing exactly two elements. So something like dict([(\"key\", \"value\"), (\"a\", \"b\")]). This can be combined with zip(..) to easily combine two lists into a key: value dict:\nkeys = [0, 1, 2]\nvalues = [\"a\", \"b\", \"c\"]\n\ncombined = dict(zip(keys, values)) # { 0: \"a\", 1: \"b\", 2: \"c\" }\n\nUnion and intersection of sets\nPython sets support unioning and intersecting using | and &amp; respectively.\nset([1]) | set([2]) # { 1, 2 }\nset([1]) &amp; set([1, 2]) # { 1 }\n\nIt's also possible to take the union of two dictionaries this way, though you can't intersect them. If the dictionaries share keys when unioning, the resulting dictionary will have the value of the right hand dict.\nDifference of sets\nSets also support computing the difference with subtraction, and the symmetric difference with ^ (xor). If you subtract set a by set b, all elements in b will be removed from a. And if you xor a and b, you'll get a set which contains the elements that are only in either a or b but not both:\na = { 1, 2, 3 }\nb = { 2, 3, 4 }\n\na - b # { 1 }\nb - a # { 4 }\na ^ b # { 1, 4 }\n\ndefaultdict\ndefaultdict is a collection from python's collections module, and it's a dictionary which has a default value for missing keys. This property can be really helpful in leetcode problems when you want to avoid nesting due to checking the base case.\nYou set the default value for the keys using a function passed into the constructor.\nBad:\nelem_counts = {}\n\nfor elem in arr:\n    if elem in elem_counts:\n        elem_counts[elem] += 1\n    else:\n        elem_counts[elem] = 1\n\nGood:\nelem_counts = defaultdict(lambda: 0) # default value of 0\n\nfor elem in arr:\n    elem_counts[elem] += 1\n\ndefaultdict is one of my favorite data structures, and I end up using it more often than regular dictionaries in leetcode problems. A pro tip is that you can specify the name of the data type you want as the constructor to get the default value, so defaultdict(int) is the same as defaultdict(lambda: 0), and defaultdict(list) is the same as lambda: [].\ndeque\nA less interesting collection, also from the collections module. This is a standard double-ended queue and can pop of the front or back with popleft(..) and pop(..) respectively, with a similar behavior for .appendleft(..) and .append(..).\nCounter\nCounter is another utility collection from the collections module. It's a pretty basic structure that's more or less a dictionary which maps elements to their number of occurrences. For example, Counter(\"aabc\") would give us { \"a\": 2, \"b\": 1, \"c\": 1 }. Counter is a bit cooler than just a dictionary because you can add and subtract them and the counts for individual elements will combine, rather than clobbering each other.\nFor example, Counter(\"aabc\") + Counter(\"abd\") would give us { \"a\": 3, \"b\": 2, \"c\": 1, \"d\": 1 }.\nAnother cool property is that Counter behaves pretty similarly to defaultdict: looking up the count for a value which isn't in the dictionary will always return 0.\nI've used this in interviews to, for example, compute the most frequent character in a string and to compute the number of characters that would need to be inserted into two strings to make them equal.\nHashing with tuples\nIn python, lists and other objects can't be used as keys to hash maps/sets. This can be pretty annoying when trying to deduplicate lists or other common operations involving hash maps, like creating a cache over a 2d grid using [x, y] coords.\nTuples, however, can be used as keys to hash maps/sets. Converting a list to a tuple is pretty simple: tuple(arr).\nHeaps with heapq\nThe heapq module allows you to rearrange the elements in an array such that they are ordered like a binary heap. This doesn't change the class of the list, it only changes the order of elements.\nTo convert to a heap, heapq.heapify(arr) will modify the array in place so that it can be used as a heap. Remember that you don't need to do this if the array is empty or only contains a single element. Sometimes I see code that looks like this,\nheap = []\nheapq.heapify(heap)\n\nwhich is entirely superfluous.\nA cool trick is that the smallest value will be at arr[0], so you can peek at this value without popping.\nTo pop and push, heapq.heappop(arr) and heapq.heappush(arr, elem). There's also heapq.heappushpop(arr, elem) that's a bit faster if you want to push and then pop at the same, though this is pretty rare.\nMin and max heaps\nPython's heapq module, like a lot of other languages, only supports min heaps. In order to implement a max heap, in which you always pop off the largest elements, we need to modify the values we insert into the heap.\nFor numbers, this is pretty easy. We just always negate the value before inserting into the heap, and after looking up from the heap. For example:\nheap = []\n\nheapq.heappush(-a)\n\n# ...\n\nval = -heapq.heappop(heap)\n\nTo use a max heap for other data structures, you can either find some way of negating the comparison, like taking the negative of an array of integers, or by writing a custom class which overrides the &gt; and &lt; operators.\nclass ReversedCompareString:\n    def __init__(self, s):\n        self.s = s\n\n    def __lt__(self, rhs):\n        return self.s &gt; rhs.s\n\n    def __eq__(self, rhs):\n        return self.s == rhs.s\n\nThen you can wrap and unwrap strings in this data structure when inserting and popping out of the heap.\nUtilities\nBinary search with bisect\nPython's standard library contains utilities for doing binary search, so you don't have to worry about implementing it yourself. Binary search can be pretty off-by-one and typo prone, so this is pretty nice.\nbisect.bisect_left(arr, elem) will return the leftmost index of the elem in the arr if it exists, and otherwise will return the index of where the element should go. There's also bisect.bisect_right(..) which will return the position to the right of the rightmost element in the arr if it exists, and otherwise has the same behavior as bisect_left. Usually bisect_left is what you want.\nbisect.bisect_left also supports a key= argument, in the same way that sorting does.\nEasy memoization with @functools.cache and @functools.lru_cache\nCaching is a pretty common pattern in dynamic programming problems. You have a function which gets called recusively with some parameters, and a cache hashmap which you insert the parameter and return value into.\n@functools.cache is a decorator that implements this caching for you in just a single line of code. It works like this:\n@functools.cache\ndef is_even(n: int) -&gt; bool:\n    return n % 2 == 0\n\nSubsequent calls to the is_even function will lookup the n parameter in the cache to see if the result has already been computed.\nFor some problems, the cache can end up getting really large and causing memory issues. This generally means that your implementation has a bug (try calling the function less, or reducing the number of parameters the function takes in), but it's also one that can often be solved without changing the implementation. Instead of a cache which never evicts keys, you can use an @functools.lru_cache to have keys automatically evicted when the cache goes above a certain size.\nBy default the max cache size is 128, but can be configured to be higher with the max_size parameter,\n@functools.lru_cache(maxsize=2 ** 9)\ndef is_even(n: int) -&gt; bool:\n    return n % 2 == 0\n\nNote that maxsize doesn't have an underscore.\nYou also tend to get bonus points from interviewers for mentioning the potentially bad memory consequences of using @cache.\nPrefix sum 1-liner\nThere are a bunch of ways in python to compute the prefix sum of an array. If you want to save on characters: prefix_sum = [0, *itertools.accumulate(nums)].\nOtherwise, I often do:\nprefix_sum = [0]\n\nfor num in nums:\n    prefix_sum.append(prefix_sum[-1] + num)\n\nI think both work fine, and I may lean towards the latter during an interview, but the former during a leetcode contest.\nMisc Tips\nReminding yourself with static types\nModern versions of python support pretty robust optional static typing. These types are ignored at runtime, but can be useful if you're coming from a strongly-typed language for helping to lay out your thoughts. Writing down the function signature and noting that it returns an int or a bool or an array can be really helpful in not getting off track and returning the wrong value. For example if the function asks for the top 2 values, but you misread it and go to return only the max value, the interviewer would be able to stop you when you confirm the return type of int rather than list[int]/tuple[int, int].\nUsing static types in python also generally tends to impress interviewers, and demonstrates a good understanding of the language. Python static typing supports pretty complex behavior like generics, literals, and dependent types, but generally just knowing the how to type the base builtin types like str, int, list[..], tuple[..], and dict[..] is more than enough.\nSentinel values with math.inf\nIn a lot of algorithms, you start out with the min/max value being the maximum/minimum possible representable value. In python this can be done trivially using math.inf and -math.inf.\nMy boilerplate for tries\nTries are a niche data structure that come up in some string problems. I have only really seen them in leetcode hards and bonus questions on OAs.\nI start with a TrieNode class, which makes up the trie:\nclass TrieNode:\n    def __init__(self, c: str):\n        self.c = c\n        self.children: dict[str, list[TrieNode]] = {}\n        self.is_end = False\n\nA trie node represents a single character (in this case c), and connects that character to others. children is a mapping from character to a list of trie nodes. is_end is true when this node is the last character in a string. is_end doesn't mean that the node can't have any children, just that some string ended here. A case where is_end is true but the node still has children is [\"a\", \"ab\"].\nOften TrieNode needs to be given more fields to more optimally solve a particular problem. For example, if you wanted to count how many strings have a given prefix, you might modify TrieNode to contain a count which keeps track of the number of strings that use the node.\nThen I declare a Trie class to serve as the root of the trie and expose an API.\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode(\"\")\n\nMost trie problems start by inserting a dictionary of words into the trie. The algorithm for adding a string to the trie is \ndef add(self, s: str):\n    root = self.root\n\n    for c in s:\n        if c not in root.children:\n            root.children[c] = TrieNode(c)\n        root = root.children[c]\n\n    root.is_end = True\n\n","id":"https://connorskees.github.io/blog/python-leetcode/","title":"Using Python for Leetcode"},"https://connorskees.github.io/extend-rule/":{"body":"@extend is a special rule in Sass that makes it easier to write base classes. Where in regular CSS you might have an element with the classes \"button button--error\", using @extend you can reduce duplication by creating a base class %button and having .button--error extend it. This results in simpler code and smaller bundle sizes.\nThe implementation of @extend is surprisingly complex. It's by far one of the hardest parts of Sass compilation. A naive implementation wouldn't be too hard, but the production implementation of @extend has been around since 2010 and over time has adopted a number of features, constraints, and optimizations. Sass tries its hardest to produce the smallest number of selectors possible, which is a non-trivial problem.\nThis post goes through a high level overview of the algorithms behind @extend. An understanding of Sass is not necessary, but some familiarity with HTML and CSS is expected. \nI'll walk through a high level description of the primitives necessary to implement @extend, and then explain how they can be combined together to get the final algorithm. The general outline of this is:\n\nAnatomy of a Selector\nThe first primitive necessary to understand @extend is the CSS selector. Selector lists are composed of a series of complex selectors, which are themselves composed of compound selectors, and which finally are composed of simple selectors.\nSimple selectors are the base atoms of a CSS selector. In Sass, they can be either:\n\nid #foo\nclass .foo\nattribute [foo], with one of 6 operators ([foo$=bar], etc.)\ntype foo, with an optional namespace. these are also sometimes called element selectors\npseudo (class and element) :hover/::before\nuniversal *, with an optional namespace\nthe parent selector &amp;\nplaceholder %foo\n\nIf you're familiar with CSS, the first 6 should already be familiar. The last 2 might only make sense if you're used to Sass. The parent selector, as the name implies, refers to the selector of the parent style rule. A selector will have a parent if it's nested inside another rule. If the style rule is at the root, then this is null. Parent selectors are resolved prior to extension, so they're not necessary to understand @extend.\nThe placeholder selector is special in that it gets removed during compilation and will not show up in the resulting CSS. This is useful when combined with @extend, as it allows for the creation of base classes that can be extended but not show up in the CSS.\nCompound selectors are composed of 1 or more simple selectors not separated by any other characters. They operate as an \"and.\" For example, .bar.foo is a compound selector containing two simple class selectors, .bar and .foo. This selector will only match elements that have both classes.\nComplex selectors are composed of 1 or more compound selectors joined together by combinators. Valid combinators are descendant ( ), next sibling (+), child (&gt;), and following sibling (~). The semantics of these are relevant to some parts of extend, and can be found in the MDN docs.\nFinally, selector lists are composed of 1 or more comma separated complex selectors.\nA bit more verbose phrasing of this can be found in the CSS spec. Sass, being a superset of CSS, inherits much of its syntax from the CSS spec.\nAnatomy of a Single Extend\nExtension can be thought of as a function that takes three arguments: the extendee, the extender, and the target. The extendee and extender are selector lists. The target is a simple selector.\nWhen we apply extension from the extender to the extendee, we look for all instances of the target and intelligently replace the target with the extender such that the extender takes on the same semantics of the target. \nThis phrasing is a bit dense, so let's look at a simple example of an extend:\na { // extendee\n    color: red;\n}\n\nb { // extender\n    @extend a;  // target\n}\n\nIn this case, our extendee is a, our extender is b, and our target is a.\nIf we compile this:\na, b {\n  color: red;\n}\n\nWe end up with a selector that matches both our extendee a and our extender b. This is pretty straightforward. Let's see what happens when we try extending a compound selector,\na:hover {\n    color: red;\n}\n\nb {\n    @extend a;\n}\n\nHere, our extendee is a:hover, our extender is b, and our target is a.\nOur result is\na:hover, b:hover {\n  color: red;\n}\n\nwhich translates the semantics of a:hover to our extender b.\nThings get a bit more interesting if we try extending complex selectors,\na a {\n    color: red;\n}\n\nb {\n    @extend a;\n}\n\nHere, our extendee is a a, our extender is b, and our target is a. This example is interesting because now we're extending a selector that has multiple instances of our target. How does Sass handle this?\na a, b a, a b, b b {\n  color: red;\n}\n\nA combinatorial explosion. We generate all possible combinations of a and b. If we try making our extendee the character a repeated 15 times, we end up with over a megabyte in just selectors for our output. But, it does accurately translate the semantics of every instance of our target a to our extender b.\nLet's look at an example of extending a selector list to see what we mean by \"intelligently replaces.\" This will be the last example we look at for now.\na, b {\n    color: red;\n}\n\nb {\n    @extend a;\n}\n\nHere, our extendee is a, b, our extender is b, and our target is a. This case is interesting because our extendee already has the semantics for our extender that we would want. How does Sass handle this?\na, b {\n  color: red;\n}\n\n\nSass is smart and doesn't generate any redundant selectors here. Though, the way this is happening under the hood is that the redundant selector is generated, it's just trimmed out during a separate pass. We'll discuss this later on.\n\nSuperselectors\nOur next primitive is the concept of a superselector and a subselector. If you're familiar with subtyping in other programming languages, the vocabulary should be a bit familiar.\nSelector A is a superselector of selector B if it matches at least all elements that B matches. B would then be considered a subselector of A.\nLet's walk through a couple examples. We'll define a function, is-superselector that takes 2 selectors and returns whether the first selector is a superselector of the second.\nis-superselector(\"a\", \"a\")\n// true\n\nAll selectors are superselectors of themselves. This should be pretty intuitive -- a matches all elements that are matched by a.\nis-superselector(\"a.foo\", \"a\")\n// false\n\na.foo isn't a superselector of a, because it only matches a elements that have the class foo. But if we switch the arguments around,\nis-superselector(\"a\", \"a.foo\")\n// true\n\na is a superselector of a.foo because it matches all the elements that a.foo would.\n\nWe'll talk about a few more interesting cases before moving on:\nis-superselector(\"a\", \"b\")\n// false\n\nTwo selectors that have no overlap can never be superselectors or subselectors of the other.\nis-superselector(\"a b\", \"a &gt; b\")\n// true\nis-superselector(\"a b\", \"a + b\")\n// false\nis-superselector(\"a b\", \"a ~ b\")\n// false\nis-superselector(\"a &gt; b\", \"a b\")\n// false\nis-superselector(\"a + b\", \"a + b\")\n// true\n\nThis is where we have to start caring about the semantics of combinators. The interesting case here is that the descendant combinator ( ) is considered a superselector of the next child combinator (&gt;) while the inverse isn't true. The other combinators don't have any interesting interactions, though they are able to be superselectors of themselves.\nSuperselector calculations work on selector lists as well: a, b is a superselector of both a and b.\nThe universal selector (*) is a superselector of everything.\nSpecificity\nThe next primitive we need to introduce is selector specificity. Consider the following CSS,\n* {\n    color: red;\n}\n\na {\n    color: green;\n}\n\n#foo {\n    color: orange;\n}\n\n.bar {\n    color: blue;\n}\n\nWhen we apply this stylesheet to the HTML &lt;a id=\"foo\" class=\"bar\" ... /&gt;, what should the color be?\nThe style the browser chooses depends on the selector's specificity. In this case, the id selector #foo is the most specific, so the color of the element will be orange.\nThe exact algorithm is this (quoting the spec):\n\nA selector's specificity is calculated as follows:\n\ncount the number of ID selectors in the selector (= a)\ncount the number of class selectors, attributes selectors, and pseudo-classes in the selector (= b)\ncount the number of type selectors and pseudo-elements in the selector (= c)\nignore the universal selector\n\nConcatenating the three numbers a-b-c (in a number system with a large base) gives the specificity.\n\nThis makes more sense if we walk through some examples. Take the selector #foo.bar:hover::before *. The specificity is calculated like this:\nOur a value is the number of ID selectors, of which there is 1.\nWe have 1 class selector and 1 pseudo class selector, so our b value is 2.\nThere is 1 pseudo element selector, so our c value is 1.\nIf we concatenate these 3 numbers together, we get a specificity value of 121.\nThe spec walks through a number of other examples:\n*               /* a=0 b=0 c=0 -&gt; specificity =   0 */\nLI              /* a=0 b=0 c=1 -&gt; specificity =   1 */\nUL LI           /* a=0 b=0 c=2 -&gt; specificity =   2 */\nUL OL+LI        /* a=0 b=0 c=3 -&gt; specificity =   3 */\nH1 + *[REL=up]  /* a=0 b=1 c=1 -&gt; specificity =  11 */\nUL OL LI.red    /* a=0 b=1 c=3 -&gt; specificity =  13 */\nLI.red.level    /* a=0 b=2 c=1 -&gt; specificity =  21 */\n#x34y           /* a=1 b=0 c=0 -&gt; specificity = 100 */\n#s12:not(FOO)   /* a=1 b=0 c=1 -&gt; specificity = 101 */\n\nAn interesting bit here is that the :not(..) pseudo class takes on the specificity of the selector that it contains and itself does not have any bearing on the calculation.\nSass makes some pretty strict guarantees about selector specificity.\nFirst, it differentiates between user provided selectors and selectors that Sass generates through executing @extend.\nSass will never alter the specificity of user provided selectors. For example, it we take a stylesheet like this:\n\n\na.foo {\n    color: red;\n}\n\na {\n    @extend .foo;\n}\n\nWhat should the resulting selector be? If we were to ignore specificity, we'd probably expect the result to just be a. This is because a is a superselector of a.foo, so the semantics of a, a.foo would be the same as a. \nHowever, the specificity of the selector plays into the semantics. If we were to treat a.foo as redundant and only emit a, that would leave us with a lower specificity than what the programmer originally wrote.\nThe solution here is to emit a, a.foo which maintains the semantics and specificity of both the original selector as written and the extension. \nFor selectors that Sass generates, things are a bit different. Sass only guarantees that generated selectors will have at least the specificity of the extender. That is, if we have an input like\na {\n    color: red;\n}\n\na.foo {\n    @extend a;\n}\n\nwhere our extender is a.foo, Sass guarantees that it will output a selector at least as specific as a.foo. Our result is\na, a.foo {\n  color: true;\n}\n\nwhich is quite similar to our previous example. Where things differ is when our extendee is more specific than our extender.\na, a.foo {\n    color: red;\n}\n\nb {\n    @extend a;\n}\n\nHere, our extender b has a specificity of 1. When we execute this code for the most recent version of Sass, we get\na, b, a.foo {\n  color: true;\n}\n\nThere's a pretty noticeable omission of b.foo here. Although this affects the semantics of our styles, Sass is free to omit this selector as an optimization as it doesn't violate the guarantee that the generated selector will have a specificity of at least that of the extender.\nSelector unification\nThe next primitive we need to introduce is the concept of selector unification.\nWhen we \"unify\" two selectors, we create a new selector that matches only the elements that are matched by both selectors. This is like taking the \"and\" of two selectors.\nUnification is fallible and will return null if it's not possible to represent the \"and\" of both selectors. For example, selector-unify(\"#a\", \"#b) will fail because #a#b would never match any elements.\nAs before, we'll walk through a couple examples to get an idea of how this primitive works.\nselector-unify(\".a\", \".b\")\n\nThis is a pretty simple example. To match both class selectors, we just concatenate them into .a.b. Most unifications of simple selectors end up just concatenating the two, unless they're a special case like two ids, two pseudo elements, two type selectors, or *.\nIn the case of *, for most combinations the result is just the other selector. You can think of it sort of like true &amp;&amp; X. Our result is always just X. Things get a bit more complex when namespaces are involved, but we won't dive into that here.\nUnification of complex selectors is a bit more.... complex :p\nI think it's helpful if we revisit the semantics of unification. Our goal is to create one selector that combines 2 selectors, A and B, and which matches the elements matched by both A and B.\nIf we look at an example like .a .b, semantically this is matching all .b elements with a .a parent. For the selector .c .d, the same is true -- we're selecting all .d elements with a .c parent.\nIf we want to unify these two selectors, what should the semantics of the resulting selector look like?\nWe'd want a selector that matches all child elements that are both .b and .d and that have parents of .a and .c. Modelling the children is pretty easy -- we just unify the children selectors to get .b.d. The parents are a bit harder -- how do you model having both parents .a and .c. \nThe solution is to emit all possible orderings of .a and .c. Specifically we would emit .a .c, .c .a, and also .a.c to account for the case in which a parent has both classes.\nPutting this together, we get the final selector of .a .c .b.d, .c .a .b.d, .a.c .b.d. In practice, implementations of Sass omit the .a.c selector because it results in much larger selectors for marginal gain.\nLet's zoom into this algorithm to see how we'd go about generating this selector.\nWe start by looking at the last compound selector of both complex selectors and trying to unify them. We refer to this final value as the \"base.\" If unification of the compound bases fails, the entire unification will fail as well.\nLet's walk through a 2 examples of this:\nselector-unify(\"a .foo\", \"a .bar\")\n\nHere, unification of the two base selectors succeeds and gives us .foo.bar, making our final unified selector a .foo.bar.\nselector-unify(\"a #foo\", \"a #bar\")\n\nIn this example, #foo and #bar can't be unified, and so the entire result is null.\nOnce we resolve and unify the bases, we need to unify the parent selectors. We refer the algorithm that does this as \"weave.\"\nWeave\nThe goal of weave is to generate all possible orderings of the parent selectors. Earlier we looked at a pretty simple example, but weaving can get pretty complex. In particular, we run into increased complexity when we have combinators other than descendant (&gt;, +, or ~), we have multiple parent selectors (e.g. .a .b .c and .d .e .f), or if the parents share a selector either with each other or the base.\nWeaving maintains the invariant that the relative ordering of compound selectors within a given complex selector will remain the same. That is, if we are merging .a .b .c and .d .e .f, .a will always come before .b and .d will always come before .e. This should make sense intuitively -- if we swapped the order of .a and .b, we would be modifying the semantics of the original selector.\nWe'll start by looking at some examples of these more complex cases, and then we'll take a deeper look at the implementation.\nThe first complex case is when there are multiple parent selectors. Take this example:\nselector-unify(\".a .b .c\", \".d .c\");\n\nUnification gives us .a .b .d .c, .d .a .b .c. We put the parent of selector 2 on both sides of selector 1.\nBased on our explanation so far, you might imagine that Sass would attempt to interleave the .d selector between .a .b, producing the parent .a .d .b; however, Sass doesn't do this for the same reason it doesn't emit .a.c or .b.c.\nFor completeness, if we look at an example where both selectors have multiple parent selectors,\nselector-unify(\".a .b .c\", \".d .e .c\");\n\nwe get .a .b .d .e .c, .d .e .a .b .c. Again, there's no interleaving of the selectors from the two parents. We simply change their ordering.\nWhen the two selectors share a common compound selector, we can often emit a much smaller result. \nThe case in which the first parents are the same should be pretty intuitive --\nselector-unify(\".a .b .c\", \".a .d .c\");\n\nHere, we can maintain the semantics of both selectors by only permuting the middle compound selector. Our unification result is .a .b .d .c, .a .d .b .c. \nIf the selectors instead share a middle compound selector, we can do a similar trick.\nselector-unify(\".a .b .c\", \".e .b .c\");\n\nOur result is .a .e .b .c, .e .a .b .c. We keep .b .c the same between both complex selectors, but we permute .a and .e.\nIn both cases that we've seen here, not de-duplicating the selector would change the semantics of the unified result from that of the original selectors. In our first case, if Sass had emitted .a .a .b .d .c, the additional .a would not only be superfluous -- it would be incorrect. The original selectors being unified only required a single .a parent.\nThe next complex case to look at is when we have to worry about combinators.\nBefore discussing combinators further though, I do want to mention that Sass today is in the process of changing how it handles invalid combinator sequences. For this reason I will be skipping over talking about parts of the existing algorithm that attempt to handle them gracefully.\nLet's go back to the simplest unify example that we've looked at: selector-unify(\".a .c\", \".b .c\"). Hopefully you remember what the unified result is -- .a .b .c, .b .a .c. This should make sense so far. But what happens if we insert a combinator into the mix?\nselector-unify(\".a &gt; .c\", \".b .c\")\n\nHow should the result be updated to account for the combinator? \nIt helps to look at the two complex selectors separately, .a .b .c and .b .a .c. For the latter, it's pretty straightforward; we can maintain the semantics by simply adding a combinator between .a and .c: .b .a &gt; .c. \nFor the former case, it's harder to reason about. Should the combinator go between the .a and .b or the .b and .c. The answer is actually neither -- Sass completely discards the second complex selector. Our final unified result is .b .a &gt; .c.\nThis can be pretty surprising -- why do we throw away the second complex selector? The answer is that it's impossible to model the semantics of .a &gt; .c while adding a parent in between. The same is true of all combinators other than descendant:  &gt;, +, and ~.\nThings get even more complex when both selectors contain combinators other than descendant.\nLet's start with the case in which the combinators on both sides are the same,\nselector-unify(\".a &gt; .c\", \".b &gt; .c\")\nselector-unify(\".a + .c\", \".b + .c\")\nselector-unify(\".a ~ .c\", \".b ~ .c\")\n\nThe semantics of the combinators here affects how we can unify the two selectors. For &gt; and +, the only valid unification is one in which the parent of .c has both .a and .b. That is, our total result is .a.b .c.\nThe sibling combinator ~ is a less restrictive. The semantics of the unified selector should be that .c is a sibling of .a and .b. If we express these semantics terms of selectors, our possible parents are .a ~ .b, .b ~ .a, and .a.b. This is very similar to how we do unification without combinators -- just with an additional ~. Our final result would be .a ~ .b ~ .c, .b ~ .a ~ .c, .b.a ~ .c.\nUnlike regular unification without combinators, Sass actually does emit the .b.a case here. This is because the likelihood of this parent selector occurring in the context of the ~ combinator is much higher than in the general case.\nThe case in which combinators are not the same is interesting as well:\nselector-unify(\".a &gt; .c\", \".b ~ .c\")\nselector-unify(\".a &gt; .c\", \".b + .c\")\nselector-unify(\".a + .c\", \".b ~ .c\")\n\nFor unification involving the &gt; combinator, the result is simple. .a becomes the parent of the other selector: .a &gt; .b ~ .c and .a &gt; .b + .c.\nWhen combining + and ~, we have to take into account that both combinators refer to sibling elements, with ~ being a more general version of +. Like when there are two ~ combinators, we have to permute both parent selectors. But in the case that one of the combinators is a +, we can omit one of the permutations. \n\nOur final selector would be .b ~ .a + .c, .b.a + .c. Note that we didn't include the .a ~ .b variant, because that would be redundant.\nPutting it All Together\nNow that we've covered the primitives of extend, we need to combine them together to get the actual algorithm.\nExtension occurs during traversal of the Sass AST. When a selector node is encountered, it is registered in an \"extension store.\" The extension store contains the state of all extensions of the current execution context. Namely, it maintains a mapping from simple selectors to the selector lists containing them and a mapping from simple selectors to the extensions containing them (i.e. the @extend rules having the simple selector as an extender). \nThe extension store also keeps tracks of source specificity and the original selectors as declared by the source code. This is done in order to maintain the invariant that Sass doesn't elide selectors as declared by users.\nWhen a selector is registered in the extension store, the mapping from simple selectors to the selectors containing them is populated. Then, if we have encountered any @extend rules up to this point, we apply them to the selector. We will have to update this selector again if we encounter further @extend rules during execution.\nThe process of applying an extension is where we get to use the primitives we discussed earlier.\nAddendum\n...\n:not\n:is/:matches/:where\n:root\n:has\nInteractions with @media\n!optional\n\n\n\n\n\n\n\n\n\n\nSass notably makes an optimization by not emitting the .a.b parent selector in the unification of .a .c and .b .c. This is because \n","id":"https://connorskees.github.io/extend-rule/","title":"Understanding `@extend`"},"https://connorskees.github.io/multiplication/":{"body":"I'm intimidated by modern mathematical algorithms, like those used for float parsing and formatting, or famously the inverse square root. \nI do love math, but it often feels like these algorithms are unapproachable to casual understanding. That is, effectively understanding the intuition behind these algorithms requires a lot of pre-requisite reading of logic- and notation-dense papers.\nI don't necessarily have the time or mathematical background to dig into the existing literature for a lot of these algorithms. But recently, I've been interested in algorithms for multiplication, after hearing that some bigint libraries rely on the fast Fourier transform to perform multiplication in some scenarios.\nThe below is what I hope to be the most comprehensive overview of modern multiplication algorithms with explanations written in plain English.\n\nIntegers\nLooping\nFundamentally multiplication describes successive additions. If we say x * 2, we can expand this as x + x. Similarly, x * 4 is the same as x + x + x + x. \nThe easiest way to implement this in code would be a for loop:\nfn multiply(multiplicand: i32, multiplier: i32) -&gt; i32 {\n    let mut product = 0;\n    \n    for _ in 0..multiplier {\n        product += multiplicand;\n    }\n\n    product\n}\n\nWe loop multiplier times, adding multiplicand to the total product each time. For right now we're ignoring complexities like overflow.\nFor small multipliers, this doesn't seem so bad. However, as our multiplier grows, the number of additions we have to perform grows similarly. In the worst case scenario, if our muliplier is u32::MAX, we'd be performing over 4 billion additions -- this is pretty slow.\nIdeally our algorithm wouldn't scale with the value of our multiplier, but rather the scale. That is, our algorithm would get slower relative to the number of digits used to represent the number, not the actual value it contains.\nLong Multiplication\nLong multiplication solves the problem of scaling relative to the number of digits.\nIt's also likely the way you were taught in school to multiply two numbers. If we look at a simple base-10 example:\n  25\n*  7\n----\n\nWe multiply all individual digits and then sum them up:\n20 * 7 + 5 * 7 = 140 + 35 = 175\n\nIf our multiplier has two digits:\n       25\n*      34\n---------\n    4 * 5\n+  4 * 20\n+  30 * 5\n+ 30 * 20\n---------\n       20\n+      80\n+     150\n+     600\n---------\n      850\n\nWe end up performing 4 additions and multiplications.\nLong multiplication has a time complexity of O(n2), and so it isn't really suitable for extremely large numbers. You may also be familiar with other methods for doing multiplication by hand; in general, these are all also O(n2).\nAlthough this algorithm is quadratic, it also is quite simple to implement and has a pretty low constant factor. This makes it suitable -- and even optimal -- for small (say, &lt;=64 bit) integers. This algorithm forms the basis of most hardware implementations of multiplication, as we'll discuss later in this post.\n\nKaratsuba (1962)\nAnatoly Karatsuba's algorithm for multiplication was the first to break the O(n2) complexity barrier. Previously it had been conjectured that no algorithm could do better than O(n2).\nKaratsuba is a recursive divide and conquer algorithm.\nIf we split our multiplication up into multiple separate multiplications, we can re-use some of the intermediate results.\nThe algorithm starts by splitting our multiplicand and multiplier in half, getting four numbers total. For example, we would split the number 23 into 20 + 3, or the number 123456 into 123000 + 456. \nMore formally: given a number of n digits, we split it into two numbers a and b such that our original number is equal to $$a \\times 10^{\\frac{n}{2}} + b$$.\nLet's look at a multiplication of two numbers, x and y. Using the splitting idea we just mentioned,\n$$\nx = a + b\n$$\n\n\n$$\ny = c + d\n$$\n\nThis is the same equation used above, but for our multiplier y we use the variables c and d. If we substitute these values into our $$x \\times y$$ equation, we get\n$$\nx \\times y = (a + b)(c + d)\n$$\nIf we distribute everything out:\n$$\nx \\times y = (a \\times 10^{\\frac{n}{2}}) \\times (c \\times 10^{\\frac{n}{2}}) + (ad \\times 10^{\\frac{n}{2}}) + (bc  \\times 10^{\\frac{n}{2}}) + bd\n$$\nSimplifying:\n$$\nx \\times y = ac \\times 10^{n} + (ad + bc) \\times 10^{\\frac{n}{2}} + bd\n$$\n\nToom–Cook\nThe Toom–Cook algorithm is a generalization of Karatsuba multiplication. Where Karatsuba multiplication splits a number into 2 constituent parts, Toom–Cook splits the number into a potentially arbitrary number of parts. Though, most commonly you'll see 3 parts (Toom 3) or 4 parts (Toom 4). Karatsuba, in this way, can also be thought of as Toom 2. Regular long multiplication is Toom 1.\n\nSchönhage–Strassen (1971)\n\nSchönhage–Strassen is also sometimes called \"FFT multiplication,\" as the core optimization of this algorithm is that it uses the fast Fourier transform to achieve O($$n \\log n \\log \\log n$$) runtime.\nSchönhage–Strassen works by splitting the multiplier and multiplicand, similar to Karatsuba, and constructs two polynomials with the decomposed integers as coeffecients. It can then make use of existing algorithms to multiply two polynomials in O($$n \\log n$$) time.\nTo understand this algorithm more concretely, we first have to understand Fourier transforms, the fast Fourier transform, and some abstract algebra.\nFürer (2007)\n\npaper: https://ivv5hpp.uni-muenster.de/u/cl/WS2007-8/mult.pdf\nhttps://ir.lib.uwo.ca/cgi/viewcontent.cgi?article=7368&amp;context=etd\n\nDe–Kurur–Saha–Saptharishi (2008)\n\nhttps://arxiv.org/abs/0801.1416\n\nHarvey–van der Hoeven–Lecerf (2014)\n\nhttps://arxiv.org/abs/1407.3361\n\nCovanov–Thomé (2015)\n\nhttps://arxiv.org/abs/1502.02800\n\nHarvey–van der Hoeven (2019)\n\nhttps://annals.math.princeton.edu/2021/193-2/p04\nhttps://hal.science/hal-02070778v2/document\n\nReals\nFloats\nFixed point\nHardware Algorithms\nOne of the simpler and faster ways to multiply two numbers on modern computers is:\nmov rax, 25\nmul rax, 34\n; rax = 850\n\n\nShift + Add\nModified Baugh-Wooley\n\nBooth (1950)\n\nWallace Trees (1964)\n\nDadda Multiplier (1965)\n\nModular Multiplication\nKochanski\n\nMontgomery\n\nFloats\nhttps://github.com/microsoft/referencesource/blob/master/System.Numerics/System/Numerics/BigIntegerBuilder.cs\nhttps://github.com/rust-num/num-bigint/blob/f09eee83f174619ac9c2489e3feec62544984bc5/src/biguint/multiplication.rs#L95\n","id":"https://connorskees.github.io/multiplication/","title":"Multiplication Algorithms"},"https://connorskees.github.io/simd-crc32/":{"body":"\nCRC32 is a common checksum algorithm, notably found in zip and PNG files. The \"CRC\" portion stands for cyclic-redundancy-check, as the algorithm is largely based around cyclic codes. The 32 refers to the number of bits \nModern implementations of this algorithm are heavily optimized and can take a while to understand. This article attempts give a simple explanation for the scalar implementation of crc32, and then work through the intuition behind the SIMD implementation.\nThe vectorized portion of this post is largely based on this Intel paper from 2009, Fast CRC Computation for Generic Polynomials Using PCLMULQDQ Instruction.\nCRC\n\n\n\n\n\n\n\n\n\nCyclic Codes\n\n\n\n\n\n","id":"https://connorskees.github.io/simd-crc32/","title":"Understanding Modern Implementations of CRC32"}},"docInfo":{"https://connorskees.github.io/":{"body":0,"title":0},"https://connorskees.github.io/bf-compiler/":{"body":2573,"title":4},"https://connorskees.github.io/blog/":{"body":0,"title":1},"https://connorskees.github.io/blog/avx-png-filter/":{"body":2948,"title":6},"https://connorskees.github.io/blog/bf-compiler/":{"body":2422,"title":4},"https://connorskees.github.io/blog/iterative-tree-traversal/":{"body":598,"title":4},"https://connorskees.github.io/blog/merge-tree/":{"body":2845,"title":9},"https://connorskees.github.io/blog/miniz-optimization/":{"body":2793,"title":5},"https://connorskees.github.io/blog/permutation-polynomials/":{"body":351,"title":2},"https://connorskees.github.io/blog/python-leetcode/":{"body":2136,"title":3},"https://connorskees.github.io/extend-rule/":{"body":2054,"title":2},"https://connorskees.github.io/multiplication/":{"body":583,"title":2},"https://connorskees.github.io/simd-crc32/":{"body":65,"title":4}},"length":13},"lang":"English"};